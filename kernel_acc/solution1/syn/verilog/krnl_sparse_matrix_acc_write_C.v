// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
// Version: 2021.1
// Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module krnl_sparse_matrix_acc_write_C (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        p_read,
        N_dout,
        N_empty_n,
        N_read,
        fifoSortMatrixC_i_0_dout,
        fifoSortMatrixC_i_0_empty_n,
        fifoSortMatrixC_i_0_read,
        fifoSortMatrixC_i_01_dout,
        fifoSortMatrixC_i_01_empty_n,
        fifoSortMatrixC_i_01_read,
        m_axi_gmem4_AWVALID,
        m_axi_gmem4_AWREADY,
        m_axi_gmem4_AWADDR,
        m_axi_gmem4_AWID,
        m_axi_gmem4_AWLEN,
        m_axi_gmem4_AWSIZE,
        m_axi_gmem4_AWBURST,
        m_axi_gmem4_AWLOCK,
        m_axi_gmem4_AWCACHE,
        m_axi_gmem4_AWPROT,
        m_axi_gmem4_AWQOS,
        m_axi_gmem4_AWREGION,
        m_axi_gmem4_AWUSER,
        m_axi_gmem4_WVALID,
        m_axi_gmem4_WREADY,
        m_axi_gmem4_WDATA,
        m_axi_gmem4_WSTRB,
        m_axi_gmem4_WLAST,
        m_axi_gmem4_WID,
        m_axi_gmem4_WUSER,
        m_axi_gmem4_ARVALID,
        m_axi_gmem4_ARREADY,
        m_axi_gmem4_ARADDR,
        m_axi_gmem4_ARID,
        m_axi_gmem4_ARLEN,
        m_axi_gmem4_ARSIZE,
        m_axi_gmem4_ARBURST,
        m_axi_gmem4_ARLOCK,
        m_axi_gmem4_ARCACHE,
        m_axi_gmem4_ARPROT,
        m_axi_gmem4_ARQOS,
        m_axi_gmem4_ARREGION,
        m_axi_gmem4_ARUSER,
        m_axi_gmem4_RVALID,
        m_axi_gmem4_RREADY,
        m_axi_gmem4_RDATA,
        m_axi_gmem4_RLAST,
        m_axi_gmem4_RID,
        m_axi_gmem4_RUSER,
        m_axi_gmem4_RRESP,
        m_axi_gmem4_BVALID,
        m_axi_gmem4_BREADY,
        m_axi_gmem4_BRESP,
        m_axi_gmem4_BID,
        m_axi_gmem4_BUSER,
        p_read1
);

parameter    ap_ST_fsm_state1 = 10'd1;
parameter    ap_ST_fsm_state2 = 10'd2;
parameter    ap_ST_fsm_state3 = 10'd4;
parameter    ap_ST_fsm_state4 = 10'd8;
parameter    ap_ST_fsm_state5 = 10'd16;
parameter    ap_ST_fsm_state6 = 10'd32;
parameter    ap_ST_fsm_state7 = 10'd64;
parameter    ap_ST_fsm_state8 = 10'd128;
parameter    ap_ST_fsm_state9 = 10'd256;
parameter    ap_ST_fsm_state10 = 10'd512;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [31:0] p_read;
input  [31:0] N_dout;
input   N_empty_n;
output   N_read;
input  [31:0] fifoSortMatrixC_i_0_dout;
input   fifoSortMatrixC_i_0_empty_n;
output   fifoSortMatrixC_i_0_read;
input  [31:0] fifoSortMatrixC_i_01_dout;
input   fifoSortMatrixC_i_01_empty_n;
output   fifoSortMatrixC_i_01_read;
output   m_axi_gmem4_AWVALID;
input   m_axi_gmem4_AWREADY;
output  [63:0] m_axi_gmem4_AWADDR;
output  [0:0] m_axi_gmem4_AWID;
output  [31:0] m_axi_gmem4_AWLEN;
output  [2:0] m_axi_gmem4_AWSIZE;
output  [1:0] m_axi_gmem4_AWBURST;
output  [1:0] m_axi_gmem4_AWLOCK;
output  [3:0] m_axi_gmem4_AWCACHE;
output  [2:0] m_axi_gmem4_AWPROT;
output  [3:0] m_axi_gmem4_AWQOS;
output  [3:0] m_axi_gmem4_AWREGION;
output  [0:0] m_axi_gmem4_AWUSER;
output   m_axi_gmem4_WVALID;
input   m_axi_gmem4_WREADY;
output  [31:0] m_axi_gmem4_WDATA;
output  [3:0] m_axi_gmem4_WSTRB;
output   m_axi_gmem4_WLAST;
output  [0:0] m_axi_gmem4_WID;
output  [0:0] m_axi_gmem4_WUSER;
output   m_axi_gmem4_ARVALID;
input   m_axi_gmem4_ARREADY;
output  [63:0] m_axi_gmem4_ARADDR;
output  [0:0] m_axi_gmem4_ARID;
output  [31:0] m_axi_gmem4_ARLEN;
output  [2:0] m_axi_gmem4_ARSIZE;
output  [1:0] m_axi_gmem4_ARBURST;
output  [1:0] m_axi_gmem4_ARLOCK;
output  [3:0] m_axi_gmem4_ARCACHE;
output  [2:0] m_axi_gmem4_ARPROT;
output  [3:0] m_axi_gmem4_ARQOS;
output  [3:0] m_axi_gmem4_ARREGION;
output  [0:0] m_axi_gmem4_ARUSER;
input   m_axi_gmem4_RVALID;
output   m_axi_gmem4_RREADY;
input  [31:0] m_axi_gmem4_RDATA;
input   m_axi_gmem4_RLAST;
input  [0:0] m_axi_gmem4_RID;
input  [0:0] m_axi_gmem4_RUSER;
input  [1:0] m_axi_gmem4_RRESP;
input   m_axi_gmem4_BVALID;
output   m_axi_gmem4_BREADY;
input  [1:0] m_axi_gmem4_BRESP;
input  [0:0] m_axi_gmem4_BID;
input  [0:0] m_axi_gmem4_BUSER;
input  [63:0] p_read1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg N_read;
reg fifoSortMatrixC_i_0_read;
reg fifoSortMatrixC_i_01_read;
reg m_axi_gmem4_AWVALID;
reg m_axi_gmem4_WVALID;
reg m_axi_gmem4_BREADY;

reg    ap_done_reg;
(* fsm_encoding = "none" *) reg   [9:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    N_blk_n;
reg    fifoSortMatrixC_i_0_blk_n;
wire    ap_CS_fsm_state4;
wire   [0:0] icmp_ln184_fu_222_p2;
wire   [0:0] trunc_ln145_fu_233_p1;
reg    fifoSortMatrixC_i_01_blk_n;
reg    gmem4_blk_n_AW;
wire    ap_CS_fsm_state3;
reg    gmem4_blk_n_W;
wire    ap_CS_fsm_state5;
reg    gmem4_blk_n_B;
wire    ap_CS_fsm_state10;
reg   [0:0] cmp12_reg_269;
reg   [31:0] N_1_reg_263;
wire   [0:0] cmp12_fu_147_p2;
wire   [61:0] N_cast_fu_153_p1;
reg   [61:0] N_cast_reg_273;
wire   [31:0] add_ln183_fu_170_p2;
reg   [31:0] add_ln183_reg_281;
wire    ap_CS_fsm_state2;
reg   [63:0] gmem4_addr_reg_286;
wire   [0:0] icmp_ln183_fu_165_p2;
wire   [30:0] add_ln184_fu_227_p2;
reg   [30:0] add_ln184_reg_295;
reg    ap_predicate_op48_read_state4;
reg    ap_predicate_op50_read_state4;
reg    ap_block_state4;
reg   [30:0] j_reg_127;
reg   [31:0] tmp_reg_138;
wire  signed [63:0] sext_ln184_fu_208_p1;
reg    ap_block_state10;
reg   [31:0] i_fu_78;
reg    ap_block_state1;
wire   [31:0] empty_fu_180_p0;
wire   [31:0] empty_fu_180_p1;
wire   [61:0] empty_fu_180_p2;
wire   [63:0] tmp_1_fu_185_p3;
wire   [63:0] empty_54_fu_193_p2;
wire   [61:0] trunc_ln_fu_198_p4;
wire   [31:0] zext_ln184_fu_218_p1;
reg   [9:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
reg    ap_ST_fsm_state3_blk;
reg    ap_ST_fsm_state4_blk;
reg    ap_ST_fsm_state5_blk;
wire    ap_ST_fsm_state6_blk;
wire    ap_ST_fsm_state7_blk;
wire    ap_ST_fsm_state8_blk;
wire    ap_ST_fsm_state9_blk;
reg    ap_ST_fsm_state10_blk;
wire   [61:0] empty_fu_180_p10;
reg    ap_condition_288;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_done_reg = 1'b0;
#0 ap_CS_fsm = 10'd1;
end

krnl_sparse_matrix_acc_mul_32ns_32ns_62_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 62 ))
mul_32ns_32ns_62_1_1_U47(
    .din0(empty_fu_180_p0),
    .din1(empty_fu_180_p1),
    .dout(empty_fu_180_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln183_fu_165_p2 == 1'd1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((~((1'b0 == N_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_78 <= 32'd0;
    end else if ((~((m_axi_gmem4_BVALID == 1'b0) & (cmp12_reg_269 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
        i_fu_78 <= add_ln183_reg_281;
    end
end

always @ (posedge ap_clk) begin
    if (((m_axi_gmem4_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        j_reg_127 <= 31'd0;
    end else if (((m_axi_gmem4_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_reg_127 <= add_ln184_reg_295;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_288)) begin
        if ((trunc_ln145_fu_233_p1 == 1'd0)) begin
            tmp_reg_138 <= fifoSortMatrixC_i_0_dout;
        end else if ((trunc_ln145_fu_233_p1 == 1'd1)) begin
            tmp_reg_138 <= fifoSortMatrixC_i_01_dout;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        N_1_reg_263 <= N_dout;
        N_cast_reg_273[31 : 0] <= N_cast_fu_153_p1[31 : 0];
        cmp12_reg_269 <= cmp12_fu_147_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        add_ln183_reg_281 <= add_ln183_fu_170_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~(((fifoSortMatrixC_i_01_empty_n == 1'b0) & (ap_predicate_op50_read_state4 == 1'b1)) | ((fifoSortMatrixC_i_0_empty_n == 1'b0) & (ap_predicate_op48_read_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4))) begin
        add_ln184_reg_295 <= add_ln184_fu_227_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln183_fu_165_p2 == 1'd0) & (cmp12_reg_269 == 1'd1))) begin
        gmem4_addr_reg_286 <= sext_ln184_fu_208_p1;
    end
end

always @ (*) begin
    if ((~((ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_blk_n = N_empty_n;
    end else begin
        N_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((1'b0 == N_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
        N_read = 1'b1;
    end else begin
        N_read = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem4_BVALID == 1'b0) & (cmp12_reg_269 == 1'd1))) begin
        ap_ST_fsm_state10_blk = 1'b1;
    end else begin
        ap_ST_fsm_state10_blk = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == N_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0))) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((m_axi_gmem4_AWREADY == 1'b0)) begin
        ap_ST_fsm_state3_blk = 1'b1;
    end else begin
        ap_ST_fsm_state3_blk = 1'b0;
    end
end

always @ (*) begin
    if ((((fifoSortMatrixC_i_01_empty_n == 1'b0) & (ap_predicate_op50_read_state4 == 1'b1)) | ((fifoSortMatrixC_i_0_empty_n == 1'b0) & (ap_predicate_op48_read_state4 == 1'b1)))) begin
        ap_ST_fsm_state4_blk = 1'b1;
    end else begin
        ap_ST_fsm_state4_blk = 1'b0;
    end
end

always @ (*) begin
    if ((m_axi_gmem4_WREADY == 1'b0)) begin
        ap_ST_fsm_state5_blk = 1'b1;
    end else begin
        ap_ST_fsm_state5_blk = 1'b0;
    end
end

assign ap_ST_fsm_state6_blk = 1'b0;

assign ap_ST_fsm_state7_blk = 1'b0;

assign ap_ST_fsm_state8_blk = 1'b0;

assign ap_ST_fsm_state9_blk = 1'b0;

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln183_fu_165_p2 == 1'd1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = ap_done_reg;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln183_fu_165_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln145_fu_233_p1 == 1'd1) & (icmp_ln184_fu_222_p2 == 1'd0))) begin
        fifoSortMatrixC_i_01_blk_n = fifoSortMatrixC_i_01_empty_n;
    end else begin
        fifoSortMatrixC_i_01_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((fifoSortMatrixC_i_01_empty_n == 1'b0) & (ap_predicate_op50_read_state4 == 1'b1)) | ((fifoSortMatrixC_i_0_empty_n == 1'b0) & (ap_predicate_op48_read_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op50_read_state4 == 1'b1))) begin
        fifoSortMatrixC_i_01_read = 1'b1;
    end else begin
        fifoSortMatrixC_i_01_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state4) & (trunc_ln145_fu_233_p1 == 1'd0) & (icmp_ln184_fu_222_p2 == 1'd0))) begin
        fifoSortMatrixC_i_0_blk_n = fifoSortMatrixC_i_0_empty_n;
    end else begin
        fifoSortMatrixC_i_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~(((fifoSortMatrixC_i_01_empty_n == 1'b0) & (ap_predicate_op50_read_state4 == 1'b1)) | ((fifoSortMatrixC_i_0_empty_n == 1'b0) & (ap_predicate_op48_read_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4) & (ap_predicate_op48_read_state4 == 1'b1))) begin
        fifoSortMatrixC_i_0_read = 1'b1;
    end else begin
        fifoSortMatrixC_i_0_read = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        gmem4_blk_n_AW = m_axi_gmem4_AWREADY;
    end else begin
        gmem4_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) & (cmp12_reg_269 == 1'd1))) begin
        gmem4_blk_n_B = m_axi_gmem4_BVALID;
    end else begin
        gmem4_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        gmem4_blk_n_W = m_axi_gmem4_WREADY;
    end else begin
        gmem4_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((m_axi_gmem4_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
        m_axi_gmem4_AWVALID = 1'b1;
    end else begin
        m_axi_gmem4_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if ((~((m_axi_gmem4_BVALID == 1'b0) & (cmp12_reg_269 == 1'd1)) & (1'b1 == ap_CS_fsm_state10) & (cmp12_reg_269 == 1'd1))) begin
        m_axi_gmem4_BREADY = 1'b1;
    end else begin
        m_axi_gmem4_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((m_axi_gmem4_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
        m_axi_gmem4_WVALID = 1'b1;
    end else begin
        m_axi_gmem4_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if ((~((1'b0 == N_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0)) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln183_fu_165_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if (((1'b1 == ap_CS_fsm_state2) & (icmp_ln183_fu_165_p2 == 1'd0) & (cmp12_reg_269 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((m_axi_gmem4_AWREADY == 1'b1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if ((~(((fifoSortMatrixC_i_01_empty_n == 1'b0) & (ap_predicate_op50_read_state4 == 1'b1)) | ((fifoSortMatrixC_i_0_empty_n == 1'b0) & (ap_predicate_op48_read_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln184_fu_222_p2 == 1'd0))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else if ((~(((fifoSortMatrixC_i_01_empty_n == 1'b0) & (ap_predicate_op50_read_state4 == 1'b1)) | ((fifoSortMatrixC_i_0_empty_n == 1'b0) & (ap_predicate_op48_read_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln184_fu_222_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((m_axi_gmem4_WREADY == 1'b1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            if ((~((m_axi_gmem4_BVALID == 1'b0) & (cmp12_reg_269 == 1'd1)) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign N_cast_fu_153_p1 = N_dout;

assign add_ln183_fu_170_p2 = (i_fu_78 + 32'd1);

assign add_ln184_fu_227_p2 = (j_reg_127 + 31'd1);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

always @ (*) begin
    ap_block_state1 = ((1'b0 == N_empty_n) | (ap_done_reg == 1'b1) | (ap_start == 1'b0));
end

always @ (*) begin
    ap_block_state10 = ((m_axi_gmem4_BVALID == 1'b0) & (cmp12_reg_269 == 1'd1));
end

always @ (*) begin
    ap_block_state4 = (((fifoSortMatrixC_i_01_empty_n == 1'b0) & (ap_predicate_op50_read_state4 == 1'b1)) | ((fifoSortMatrixC_i_0_empty_n == 1'b0) & (ap_predicate_op48_read_state4 == 1'b1)));
end

always @ (*) begin
    ap_condition_288 = (~(((fifoSortMatrixC_i_01_empty_n == 1'b0) & (ap_predicate_op50_read_state4 == 1'b1)) | ((fifoSortMatrixC_i_0_empty_n == 1'b0) & (ap_predicate_op48_read_state4 == 1'b1))) & (1'b1 == ap_CS_fsm_state4) & (icmp_ln184_fu_222_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op48_read_state4 = ((trunc_ln145_fu_233_p1 == 1'd0) & (icmp_ln184_fu_222_p2 == 1'd0));
end

always @ (*) begin
    ap_predicate_op50_read_state4 = ((trunc_ln145_fu_233_p1 == 1'd1) & (icmp_ln184_fu_222_p2 == 1'd0));
end

assign cmp12_fu_147_p2 = (($signed(N_dout) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign empty_54_fu_193_p2 = (tmp_1_fu_185_p3 + p_read1);

assign empty_fu_180_p0 = N_cast_reg_273;

assign empty_fu_180_p1 = empty_fu_180_p10;

assign empty_fu_180_p10 = i_fu_78;

assign icmp_ln183_fu_165_p2 = ((i_fu_78 == p_read) ? 1'b1 : 1'b0);

assign icmp_ln184_fu_222_p2 = ((zext_ln184_fu_218_p1 == N_1_reg_263) ? 1'b1 : 1'b0);

assign m_axi_gmem4_ARADDR = 64'd0;

assign m_axi_gmem4_ARBURST = 2'd0;

assign m_axi_gmem4_ARCACHE = 4'd0;

assign m_axi_gmem4_ARID = 1'd0;

assign m_axi_gmem4_ARLEN = 32'd0;

assign m_axi_gmem4_ARLOCK = 2'd0;

assign m_axi_gmem4_ARPROT = 3'd0;

assign m_axi_gmem4_ARQOS = 4'd0;

assign m_axi_gmem4_ARREGION = 4'd0;

assign m_axi_gmem4_ARSIZE = 3'd0;

assign m_axi_gmem4_ARUSER = 1'd0;

assign m_axi_gmem4_ARVALID = 1'b0;

assign m_axi_gmem4_AWADDR = gmem4_addr_reg_286;

assign m_axi_gmem4_AWBURST = 2'd0;

assign m_axi_gmem4_AWCACHE = 4'd0;

assign m_axi_gmem4_AWID = 1'd0;

assign m_axi_gmem4_AWLEN = N_1_reg_263;

assign m_axi_gmem4_AWLOCK = 2'd0;

assign m_axi_gmem4_AWPROT = 3'd0;

assign m_axi_gmem4_AWQOS = 4'd0;

assign m_axi_gmem4_AWREGION = 4'd0;

assign m_axi_gmem4_AWSIZE = 3'd0;

assign m_axi_gmem4_AWUSER = 1'd0;

assign m_axi_gmem4_RREADY = 1'b0;

assign m_axi_gmem4_WDATA = tmp_reg_138;

assign m_axi_gmem4_WID = 1'd0;

assign m_axi_gmem4_WLAST = 1'b0;

assign m_axi_gmem4_WSTRB = 4'd15;

assign m_axi_gmem4_WUSER = 1'd0;

assign sext_ln184_fu_208_p1 = $signed(trunc_ln_fu_198_p4);

assign tmp_1_fu_185_p3 = {{empty_fu_180_p2}, {2'd0}};

assign trunc_ln145_fu_233_p1 = j_reg_127[0:0];

assign trunc_ln_fu_198_p4 = {{empty_54_fu_193_p2[63:2]}};

assign zext_ln184_fu_218_p1 = j_reg_127;

always @ (posedge ap_clk) begin
    N_cast_reg_273[61:32] <= 30'b000000000000000000000000000000;
end

endmodule //krnl_sparse_matrix_acc_write_C
