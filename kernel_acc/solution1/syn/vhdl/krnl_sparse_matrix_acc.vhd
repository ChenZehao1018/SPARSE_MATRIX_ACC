-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2021.1 (64-bit)
-- Version: 2021.1
-- Copyright (C) Copyright 1986-2021 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity krnl_sparse_matrix_acc is
generic (
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 7;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM2_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM3_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM3_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM3_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_GMEM4_ID_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_GMEM4_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM4_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_GMEM0_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM1_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM2_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM2_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM3_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM3_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_GMEM4_USER_VALUE : INTEGER := 0;
    C_M_AXI_GMEM4_PROT_VALUE : INTEGER := 0;
    C_M_AXI_GMEM4_CACHE_VALUE : INTEGER := 3 );
port (
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    m_axi_gmem0_AWVALID : OUT STD_LOGIC;
    m_axi_gmem0_AWREADY : IN STD_LOGIC;
    m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem0_WVALID : OUT STD_LOGIC;
    m_axi_gmem0_WREADY : IN STD_LOGIC;
    m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem0_WLAST : OUT STD_LOGIC;
    m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_WUSER_WIDTH-1 downto 0);
    m_axi_gmem0_ARVALID : OUT STD_LOGIC;
    m_axi_gmem0_ARREADY : IN STD_LOGIC;
    m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ADDR_WIDTH-1 downto 0);
    m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RVALID : IN STD_LOGIC;
    m_axi_gmem0_RREADY : OUT STD_LOGIC;
    m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_DATA_WIDTH-1 downto 0);
    m_axi_gmem0_RLAST : IN STD_LOGIC;
    m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_RUSER_WIDTH-1 downto 0);
    m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BVALID : IN STD_LOGIC;
    m_axi_gmem0_BREADY : OUT STD_LOGIC;
    m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_ID_WIDTH-1 downto 0);
    m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM0_BUSER_WIDTH-1 downto 0);
    m_axi_gmem1_AWVALID : OUT STD_LOGIC;
    m_axi_gmem1_AWREADY : IN STD_LOGIC;
    m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem1_WVALID : OUT STD_LOGIC;
    m_axi_gmem1_WREADY : IN STD_LOGIC;
    m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem1_WLAST : OUT STD_LOGIC;
    m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_WUSER_WIDTH-1 downto 0);
    m_axi_gmem1_ARVALID : OUT STD_LOGIC;
    m_axi_gmem1_ARREADY : IN STD_LOGIC;
    m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ADDR_WIDTH-1 downto 0);
    m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RVALID : IN STD_LOGIC;
    m_axi_gmem1_RREADY : OUT STD_LOGIC;
    m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_DATA_WIDTH-1 downto 0);
    m_axi_gmem1_RLAST : IN STD_LOGIC;
    m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_RUSER_WIDTH-1 downto 0);
    m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BVALID : IN STD_LOGIC;
    m_axi_gmem1_BREADY : OUT STD_LOGIC;
    m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_ID_WIDTH-1 downto 0);
    m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM1_BUSER_WIDTH-1 downto 0);
    m_axi_gmem2_AWVALID : OUT STD_LOGIC;
    m_axi_gmem2_AWREADY : IN STD_LOGIC;
    m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem2_WVALID : OUT STD_LOGIC;
    m_axi_gmem2_WREADY : IN STD_LOGIC;
    m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem2_WLAST : OUT STD_LOGIC;
    m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_WUSER_WIDTH-1 downto 0);
    m_axi_gmem2_ARVALID : OUT STD_LOGIC;
    m_axi_gmem2_ARREADY : IN STD_LOGIC;
    m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ADDR_WIDTH-1 downto 0);
    m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RVALID : IN STD_LOGIC;
    m_axi_gmem2_RREADY : OUT STD_LOGIC;
    m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_DATA_WIDTH-1 downto 0);
    m_axi_gmem2_RLAST : IN STD_LOGIC;
    m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_RUSER_WIDTH-1 downto 0);
    m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BVALID : IN STD_LOGIC;
    m_axi_gmem2_BREADY : OUT STD_LOGIC;
    m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_ID_WIDTH-1 downto 0);
    m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM2_BUSER_WIDTH-1 downto 0);
    m_axi_gmem3_AWVALID : OUT STD_LOGIC;
    m_axi_gmem3_AWREADY : IN STD_LOGIC;
    m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem3_WVALID : OUT STD_LOGIC;
    m_axi_gmem3_WREADY : IN STD_LOGIC;
    m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem3_WLAST : OUT STD_LOGIC;
    m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_WUSER_WIDTH-1 downto 0);
    m_axi_gmem3_ARVALID : OUT STD_LOGIC;
    m_axi_gmem3_ARREADY : IN STD_LOGIC;
    m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ADDR_WIDTH-1 downto 0);
    m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RVALID : IN STD_LOGIC;
    m_axi_gmem3_RREADY : OUT STD_LOGIC;
    m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_DATA_WIDTH-1 downto 0);
    m_axi_gmem3_RLAST : IN STD_LOGIC;
    m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_RUSER_WIDTH-1 downto 0);
    m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BVALID : IN STD_LOGIC;
    m_axi_gmem3_BREADY : OUT STD_LOGIC;
    m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_ID_WIDTH-1 downto 0);
    m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM3_BUSER_WIDTH-1 downto 0);
    m_axi_gmem4_AWVALID : OUT STD_LOGIC;
    m_axi_gmem4_AWREADY : IN STD_LOGIC;
    m_axi_gmem4_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ADDR_WIDTH-1 downto 0);
    m_axi_gmem4_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_AWUSER_WIDTH-1 downto 0);
    m_axi_gmem4_WVALID : OUT STD_LOGIC;
    m_axi_gmem4_WREADY : IN STD_LOGIC;
    m_axi_gmem4_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH-1 downto 0);
    m_axi_gmem4_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH/8-1 downto 0);
    m_axi_gmem4_WLAST : OUT STD_LOGIC;
    m_axi_gmem4_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_WUSER_WIDTH-1 downto 0);
    m_axi_gmem4_ARVALID : OUT STD_LOGIC;
    m_axi_gmem4_ARREADY : IN STD_LOGIC;
    m_axi_gmem4_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ADDR_WIDTH-1 downto 0);
    m_axi_gmem4_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_gmem4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_gmem4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_gmem4_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ARUSER_WIDTH-1 downto 0);
    m_axi_gmem4_RVALID : IN STD_LOGIC;
    m_axi_gmem4_RREADY : OUT STD_LOGIC;
    m_axi_gmem4_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_DATA_WIDTH-1 downto 0);
    m_axi_gmem4_RLAST : IN STD_LOGIC;
    m_axi_gmem4_RID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_RUSER_WIDTH-1 downto 0);
    m_axi_gmem4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BVALID : IN STD_LOGIC;
    m_axi_gmem4_BREADY : OUT STD_LOGIC;
    m_axi_gmem4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_gmem4_BID : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_ID_WIDTH-1 downto 0);
    m_axi_gmem4_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_GMEM4_BUSER_WIDTH-1 downto 0) );
end;


architecture behav of krnl_sparse_matrix_acc is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "krnl_sparse_matrix_acc_krnl_sparse_matrix_acc,hls_ip_2021_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=20,HLS_SYN_DSP=0,HLS_SYN_FF=6728,HLS_SYN_LUT=9548,HLS_VERSION=2021_1}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_rst_n_inv : STD_LOGIC;
    signal HLSPtr_i : STD_LOGIC_VECTOR (63 downto 0);
    signal matrixA_hls_idx : STD_LOGIC_VECTOR (63 downto 0);
    signal matrixA_i : STD_LOGIC_VECTOR (63 downto 0);
    signal matrixB_i : STD_LOGIC_VECTOR (63 downto 0);
    signal matrixC_o : STD_LOGIC_VECTOR (63 downto 0);
    signal lenEdgeListPtr : STD_LOGIC_VECTOR (31 downto 0);
    signal lenEdgePtr : STD_LOGIC_VECTOR (31 downto 0);
    signal M : STD_LOGIC_VECTOR (31 downto 0);
    signal K : STD_LOGIC_VECTOR (31 downto 0);
    signal N : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal gmem0_AWREADY : STD_LOGIC;
    signal gmem0_WREADY : STD_LOGIC;
    signal gmem0_ARREADY : STD_LOGIC;
    signal gmem0_RVALID : STD_LOGIC;
    signal gmem0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem0_RLAST : STD_LOGIC;
    signal gmem0_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BVALID : STD_LOGIC;
    signal gmem0_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem0_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem0_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_AWREADY : STD_LOGIC;
    signal gmem1_WREADY : STD_LOGIC;
    signal gmem1_ARREADY : STD_LOGIC;
    signal gmem1_RVALID : STD_LOGIC;
    signal gmem1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem1_RLAST : STD_LOGIC;
    signal gmem1_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BVALID : STD_LOGIC;
    signal gmem1_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem1_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem1_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_AWREADY : STD_LOGIC;
    signal gmem2_WREADY : STD_LOGIC;
    signal gmem2_ARREADY : STD_LOGIC;
    signal gmem2_RVALID : STD_LOGIC;
    signal gmem2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem2_RLAST : STD_LOGIC;
    signal gmem2_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BVALID : STD_LOGIC;
    signal gmem2_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem2_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem2_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_AWREADY : STD_LOGIC;
    signal gmem3_WREADY : STD_LOGIC;
    signal gmem3_ARREADY : STD_LOGIC;
    signal gmem3_RVALID : STD_LOGIC;
    signal gmem3_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem3_RLAST : STD_LOGIC;
    signal gmem3_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BVALID : STD_LOGIC;
    signal gmem3_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem3_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem3_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_AWREADY : STD_LOGIC;
    signal gmem4_WREADY : STD_LOGIC;
    signal gmem4_ARREADY : STD_LOGIC;
    signal gmem4_RVALID : STD_LOGIC;
    signal gmem4_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal gmem4_RLAST : STD_LOGIC;
    signal gmem4_RID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_RUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_RRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem4_BVALID : STD_LOGIC;
    signal gmem4_BRESP : STD_LOGIC_VECTOR (1 downto 0);
    signal gmem4_BID : STD_LOGIC_VECTOR (0 downto 0);
    signal gmem4_BUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal entry_proc_U0_ap_start : STD_LOGIC;
    signal entry_proc_U0_ap_done : STD_LOGIC;
    signal entry_proc_U0_ap_continue : STD_LOGIC;
    signal entry_proc_U0_ap_idle : STD_LOGIC;
    signal entry_proc_U0_ap_ready : STD_LOGIC;
    signal entry_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal entry_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_channel_done_M_c_channel : STD_LOGIC;
    signal M_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_M_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_M_c_channel : STD_LOGIC;
    signal ap_channel_done_matrixC_o_c_channel : STD_LOGIC;
    signal matrixC_o_c_channel_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_matrixC_o_c_channel : STD_LOGIC := '0';
    signal ap_sync_channel_write_matrixC_o_c_channel : STD_LOGIC;
    signal read_edge_list_ptr_U0_ap_start : STD_LOGIC;
    signal read_edge_list_ptr_U0_ap_done : STD_LOGIC;
    signal read_edge_list_ptr_U0_ap_continue : STD_LOGIC;
    signal read_edge_list_ptr_U0_ap_idle : STD_LOGIC;
    signal read_edge_list_ptr_U0_ap_ready : STD_LOGIC;
    signal read_edge_list_ptr_U0_start_out : STD_LOGIC;
    signal read_edge_list_ptr_U0_start_write : STD_LOGIC;
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWVALID : STD_LOGIC;
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_WVALID : STD_LOGIC;
    signal read_edge_list_ptr_U0_m_axi_gmem0_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_WLAST : STD_LOGIC;
    signal read_edge_list_ptr_U0_m_axi_gmem0_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARVALID : STD_LOGIC;
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_edge_list_ptr_U0_m_axi_gmem0_RREADY : STD_LOGIC;
    signal read_edge_list_ptr_U0_m_axi_gmem0_BREADY : STD_LOGIC;
    signal read_edge_list_ptr_U0_fifoEdgeListPtr11_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read_edge_list_ptr_U0_fifoEdgeListPtr11_write : STD_LOGIC;
    signal read_edge_list_ptr_U0_lenEdgeListPtr_c27_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read_edge_list_ptr_U0_lenEdgeListPtr_c27_write : STD_LOGIC;
    signal read_A_U0_ap_start : STD_LOGIC;
    signal read_A_U0_ap_done : STD_LOGIC;
    signal read_A_U0_ap_continue : STD_LOGIC;
    signal read_A_U0_ap_idle : STD_LOGIC;
    signal read_A_U0_ap_ready : STD_LOGIC;
    signal read_A_U0_m_axi_gmem1_AWVALID : STD_LOGIC;
    signal read_A_U0_m_axi_gmem1_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_A_U0_m_axi_gmem1_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem1_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_A_U0_m_axi_gmem1_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_A_U0_m_axi_gmem1_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_A_U0_m_axi_gmem1_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_A_U0_m_axi_gmem1_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem1_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_A_U0_m_axi_gmem1_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem1_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem1_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem1_WVALID : STD_LOGIC;
    signal read_A_U0_m_axi_gmem1_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal read_A_U0_m_axi_gmem1_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem1_WLAST : STD_LOGIC;
    signal read_A_U0_m_axi_gmem1_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem1_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem1_ARVALID : STD_LOGIC;
    signal read_A_U0_m_axi_gmem1_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_A_U0_m_axi_gmem1_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem1_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_A_U0_m_axi_gmem1_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_A_U0_m_axi_gmem1_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_A_U0_m_axi_gmem1_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_A_U0_m_axi_gmem1_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem1_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_A_U0_m_axi_gmem1_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem1_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem1_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem1_RREADY : STD_LOGIC;
    signal read_A_U0_m_axi_gmem1_BREADY : STD_LOGIC;
    signal read_A_U0_m_axi_gmem2_AWVALID : STD_LOGIC;
    signal read_A_U0_m_axi_gmem2_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_A_U0_m_axi_gmem2_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem2_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_A_U0_m_axi_gmem2_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_A_U0_m_axi_gmem2_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_A_U0_m_axi_gmem2_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_A_U0_m_axi_gmem2_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem2_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_A_U0_m_axi_gmem2_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem2_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem2_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem2_WVALID : STD_LOGIC;
    signal read_A_U0_m_axi_gmem2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal read_A_U0_m_axi_gmem2_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem2_WLAST : STD_LOGIC;
    signal read_A_U0_m_axi_gmem2_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem2_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem2_ARVALID : STD_LOGIC;
    signal read_A_U0_m_axi_gmem2_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_A_U0_m_axi_gmem2_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem2_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_A_U0_m_axi_gmem2_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_A_U0_m_axi_gmem2_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_A_U0_m_axi_gmem2_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_A_U0_m_axi_gmem2_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem2_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_A_U0_m_axi_gmem2_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem2_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_A_U0_m_axi_gmem2_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_A_U0_m_axi_gmem2_RREADY : STD_LOGIC;
    signal read_A_U0_m_axi_gmem2_BREADY : STD_LOGIC;
    signal read_A_U0_fifoMatrixAIdx12_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read_A_U0_fifoMatrixAIdx12_write : STD_LOGIC;
    signal read_A_U0_fifoMatrixA13_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read_A_U0_fifoMatrixA13_write : STD_LOGIC;
    signal read_B_U0_ap_start : STD_LOGIC;
    signal read_B_U0_ap_done : STD_LOGIC;
    signal read_B_U0_ap_continue : STD_LOGIC;
    signal read_B_U0_ap_idle : STD_LOGIC;
    signal read_B_U0_ap_ready : STD_LOGIC;
    signal read_B_U0_m_axi_gmem3_AWVALID : STD_LOGIC;
    signal read_B_U0_m_axi_gmem3_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_B_U0_m_axi_gmem3_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_B_U0_m_axi_gmem3_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_B_U0_m_axi_gmem3_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_B_U0_m_axi_gmem3_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_B_U0_m_axi_gmem3_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_B_U0_m_axi_gmem3_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_B_U0_m_axi_gmem3_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_B_U0_m_axi_gmem3_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_B_U0_m_axi_gmem3_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_B_U0_m_axi_gmem3_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_B_U0_m_axi_gmem3_WVALID : STD_LOGIC;
    signal read_B_U0_m_axi_gmem3_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal read_B_U0_m_axi_gmem3_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal read_B_U0_m_axi_gmem3_WLAST : STD_LOGIC;
    signal read_B_U0_m_axi_gmem3_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_B_U0_m_axi_gmem3_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_B_U0_m_axi_gmem3_ARVALID : STD_LOGIC;
    signal read_B_U0_m_axi_gmem3_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal read_B_U0_m_axi_gmem3_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal read_B_U0_m_axi_gmem3_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal read_B_U0_m_axi_gmem3_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal read_B_U0_m_axi_gmem3_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal read_B_U0_m_axi_gmem3_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal read_B_U0_m_axi_gmem3_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal read_B_U0_m_axi_gmem3_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal read_B_U0_m_axi_gmem3_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal read_B_U0_m_axi_gmem3_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal read_B_U0_m_axi_gmem3_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal read_B_U0_m_axi_gmem3_RREADY : STD_LOGIC;
    signal read_B_U0_m_axi_gmem3_BREADY : STD_LOGIC;
    signal read_B_U0_fifoMatrixB14_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read_B_U0_fifoMatrixB14_write : STD_LOGIC;
    signal read_B_U0_N_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal read_B_U0_N_c_write : STD_LOGIC;
    signal calc_C_U0_ap_start : STD_LOGIC;
    signal calc_C_U0_ap_done : STD_LOGIC;
    signal calc_C_U0_ap_continue : STD_LOGIC;
    signal calc_C_U0_ap_idle : STD_LOGIC;
    signal calc_C_U0_ap_ready : STD_LOGIC;
    signal calc_C_U0_start_out : STD_LOGIC;
    signal calc_C_U0_start_write : STD_LOGIC;
    signal calc_C_U0_lenEdgeListPtr_read : STD_LOGIC;
    signal calc_C_U0_fifoEdgeListPtr11_read : STD_LOGIC;
    signal calc_C_U0_fifoMatrixAIdx12_read : STD_LOGIC;
    signal calc_C_U0_fifoMatrixA13_read : STD_LOGIC;
    signal calc_C_U0_fifoMatrixB14_read : STD_LOGIC;
    signal calc_C_U0_fifoEdgeListPtr_calC15_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_C_U0_fifoEdgeListPtr_calC15_write : STD_LOGIC;
    signal calc_C_U0_fifoMatrixCIdx_o_0_0_0_0_din : STD_LOGIC_VECTOR (15 downto 0);
    signal calc_C_U0_fifoMatrixCIdx_o_0_0_0_0_write : STD_LOGIC;
    signal calc_C_U0_fifoMatrixCIdx_o_0_0_0_01_din : STD_LOGIC_VECTOR (15 downto 0);
    signal calc_C_U0_fifoMatrixCIdx_o_0_0_0_01_write : STD_LOGIC;
    signal calc_C_U0_fifoCalcMatrixC_o_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_C_U0_fifoCalcMatrixC_o_0_write : STD_LOGIC;
    signal calc_C_U0_fifoCalcMatrixC_o_02_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_C_U0_fifoCalcMatrixC_o_02_write : STD_LOGIC;
    signal calc_C_U0_lenEdgeListPtr_c_din : STD_LOGIC_VECTOR (31 downto 0);
    signal calc_C_U0_lenEdgeListPtr_c_write : STD_LOGIC;
    signal sort_C_U0_ap_start : STD_LOGIC;
    signal sort_C_U0_ap_done : STD_LOGIC;
    signal sort_C_U0_ap_continue : STD_LOGIC;
    signal sort_C_U0_ap_idle : STD_LOGIC;
    signal sort_C_U0_ap_ready : STD_LOGIC;
    signal sort_C_U0_lenEdgeListPtr_read : STD_LOGIC;
    signal sort_C_U0_fifoEdgeListPtr_calC15_read : STD_LOGIC;
    signal sort_C_U0_fifoMatrixCIdx_i_0_0_0_0_read : STD_LOGIC;
    signal sort_C_U0_fifoMatrixCIdx_i_0_0_0_01_read : STD_LOGIC;
    signal sort_C_U0_fifoCalcMatrixC_i_0_read : STD_LOGIC;
    signal sort_C_U0_fifoCalcMatrixC_i_02_read : STD_LOGIC;
    signal sort_C_U0_fifoSortMatrixC_o_0_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_C_U0_fifoSortMatrixC_o_0_write : STD_LOGIC;
    signal sort_C_U0_fifoSortMatrixC_o_03_din : STD_LOGIC_VECTOR (31 downto 0);
    signal sort_C_U0_fifoSortMatrixC_o_03_write : STD_LOGIC;
    signal write_C_U0_ap_start : STD_LOGIC;
    signal write_C_U0_ap_done : STD_LOGIC;
    signal write_C_U0_ap_continue : STD_LOGIC;
    signal write_C_U0_ap_idle : STD_LOGIC;
    signal write_C_U0_ap_ready : STD_LOGIC;
    signal write_C_U0_N_read : STD_LOGIC;
    signal write_C_U0_fifoSortMatrixC_i_0_read : STD_LOGIC;
    signal write_C_U0_fifoSortMatrixC_i_01_read : STD_LOGIC;
    signal write_C_U0_m_axi_gmem4_AWVALID : STD_LOGIC;
    signal write_C_U0_m_axi_gmem4_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_C_U0_m_axi_gmem4_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_C_U0_m_axi_gmem4_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_C_U0_m_axi_gmem4_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_C_U0_m_axi_gmem4_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_C_U0_m_axi_gmem4_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_C_U0_m_axi_gmem4_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_C_U0_m_axi_gmem4_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_C_U0_m_axi_gmem4_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_C_U0_m_axi_gmem4_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_C_U0_m_axi_gmem4_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_C_U0_m_axi_gmem4_WVALID : STD_LOGIC;
    signal write_C_U0_m_axi_gmem4_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal write_C_U0_m_axi_gmem4_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal write_C_U0_m_axi_gmem4_WLAST : STD_LOGIC;
    signal write_C_U0_m_axi_gmem4_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_C_U0_m_axi_gmem4_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_C_U0_m_axi_gmem4_ARVALID : STD_LOGIC;
    signal write_C_U0_m_axi_gmem4_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal write_C_U0_m_axi_gmem4_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal write_C_U0_m_axi_gmem4_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal write_C_U0_m_axi_gmem4_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal write_C_U0_m_axi_gmem4_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal write_C_U0_m_axi_gmem4_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal write_C_U0_m_axi_gmem4_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal write_C_U0_m_axi_gmem4_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal write_C_U0_m_axi_gmem4_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal write_C_U0_m_axi_gmem4_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal write_C_U0_m_axi_gmem4_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal write_C_U0_m_axi_gmem4_RREADY : STD_LOGIC;
    signal write_C_U0_m_axi_gmem4_BREADY : STD_LOGIC;
    signal matrixC_o_c_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal matrixC_o_c_channel_empty_n : STD_LOGIC;
    signal M_c_channel_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal M_c_channel_empty_n : STD_LOGIC;
    signal fifoEdgeListPtr_full_n : STD_LOGIC;
    signal fifoEdgeListPtr_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifoEdgeListPtr_empty_n : STD_LOGIC;
    signal lenEdgeListPtr_c27_full_n : STD_LOGIC;
    signal lenEdgeListPtr_c27_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal lenEdgeListPtr_c27_empty_n : STD_LOGIC;
    signal fifoMatrixAIdx_full_n : STD_LOGIC;
    signal fifoMatrixAIdx_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifoMatrixAIdx_empty_n : STD_LOGIC;
    signal fifoMatrixA_full_n : STD_LOGIC;
    signal fifoMatrixA_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifoMatrixA_empty_n : STD_LOGIC;
    signal fifoMatrixB_full_n : STD_LOGIC;
    signal fifoMatrixB_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifoMatrixB_empty_n : STD_LOGIC;
    signal N_c_full_n : STD_LOGIC;
    signal N_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal N_c_empty_n : STD_LOGIC;
    signal fifoEdgeListPtr_calC_full_n : STD_LOGIC;
    signal fifoEdgeListPtr_calC_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifoEdgeListPtr_calC_empty_n : STD_LOGIC;
    signal fifoMatrixCIdxArray_V_V_0_full_n : STD_LOGIC;
    signal fifoMatrixCIdxArray_V_V_0_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal fifoMatrixCIdxArray_V_V_0_empty_n : STD_LOGIC;
    signal fifoMatrixCIdxArray_V_V_1_full_n : STD_LOGIC;
    signal fifoMatrixCIdxArray_V_V_1_dout : STD_LOGIC_VECTOR (15 downto 0);
    signal fifoMatrixCIdxArray_V_V_1_empty_n : STD_LOGIC;
    signal fifoCalcMatrixCArray_V_0_full_n : STD_LOGIC;
    signal fifoCalcMatrixCArray_V_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifoCalcMatrixCArray_V_0_empty_n : STD_LOGIC;
    signal fifoCalcMatrixCArray_V_1_full_n : STD_LOGIC;
    signal fifoCalcMatrixCArray_V_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifoCalcMatrixCArray_V_1_empty_n : STD_LOGIC;
    signal lenEdgeListPtr_c_full_n : STD_LOGIC;
    signal lenEdgeListPtr_c_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal lenEdgeListPtr_c_empty_n : STD_LOGIC;
    signal fifoSortMatrixCArray_V_0_full_n : STD_LOGIC;
    signal fifoSortMatrixCArray_V_0_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifoSortMatrixCArray_V_0_empty_n : STD_LOGIC;
    signal fifoSortMatrixCArray_V_1_full_n : STD_LOGIC;
    signal fifoSortMatrixCArray_V_1_dout : STD_LOGIC_VECTOR (31 downto 0);
    signal fifoSortMatrixCArray_V_1_empty_n : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal ap_sync_reg_entry_proc_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_entry_proc_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_edge_list_ptr_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_edge_list_ptr_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_A_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_A_U0_ap_ready : STD_LOGIC;
    signal ap_sync_reg_read_B_U0_ap_ready : STD_LOGIC := '0';
    signal ap_sync_read_B_U0_ap_ready : STD_LOGIC;
    signal start_for_calc_C_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_calc_C_U0_full_n : STD_LOGIC;
    signal start_for_calc_C_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_calc_C_U0_empty_n : STD_LOGIC;
    signal start_for_sort_C_U0_din : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sort_C_U0_full_n : STD_LOGIC;
    signal start_for_sort_C_U0_dout : STD_LOGIC_VECTOR (0 downto 0);
    signal start_for_sort_C_U0_empty_n : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component krnl_sparse_matrix_acc_entry_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        matrixC_o : IN STD_LOGIC_VECTOR (63 downto 0);
        M : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component krnl_sparse_matrix_acc_read_edge_list_ptr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        lenEdgeListPtr : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWVALID : OUT STD_LOGIC;
        m_axi_gmem0_AWREADY : IN STD_LOGIC;
        m_axi_gmem0_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WVALID : OUT STD_LOGIC;
        m_axi_gmem0_WREADY : IN STD_LOGIC;
        m_axi_gmem0_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_WLAST : OUT STD_LOGIC;
        m_axi_gmem0_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARVALID : OUT STD_LOGIC;
        m_axi_gmem0_ARREADY : IN STD_LOGIC;
        m_axi_gmem0_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem0_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem0_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RVALID : IN STD_LOGIC;
        m_axi_gmem0_RREADY : OUT STD_LOGIC;
        m_axi_gmem0_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem0_RLAST : IN STD_LOGIC;
        m_axi_gmem0_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BVALID : IN STD_LOGIC;
        m_axi_gmem0_BREADY : OUT STD_LOGIC;
        m_axi_gmem0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem0_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem0_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        HLSPtr_i : IN STD_LOGIC_VECTOR (63 downto 0);
        fifoEdgeListPtr11_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifoEdgeListPtr11_full_n : IN STD_LOGIC;
        fifoEdgeListPtr11_write : OUT STD_LOGIC;
        lenEdgeListPtr_c27_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        lenEdgeListPtr_c27_full_n : IN STD_LOGIC;
        lenEdgeListPtr_c27_write : OUT STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_read_A IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lenEdgePtr : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWVALID : OUT STD_LOGIC;
        m_axi_gmem1_AWREADY : IN STD_LOGIC;
        m_axi_gmem1_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WVALID : OUT STD_LOGIC;
        m_axi_gmem1_WREADY : IN STD_LOGIC;
        m_axi_gmem1_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_WLAST : OUT STD_LOGIC;
        m_axi_gmem1_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARVALID : OUT STD_LOGIC;
        m_axi_gmem1_ARREADY : IN STD_LOGIC;
        m_axi_gmem1_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem1_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem1_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RVALID : IN STD_LOGIC;
        m_axi_gmem1_RREADY : OUT STD_LOGIC;
        m_axi_gmem1_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem1_RLAST : IN STD_LOGIC;
        m_axi_gmem1_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BVALID : IN STD_LOGIC;
        m_axi_gmem1_BREADY : OUT STD_LOGIC;
        m_axi_gmem1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem1_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem1_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        matrixA_hls_idx : IN STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWVALID : OUT STD_LOGIC;
        m_axi_gmem2_AWREADY : IN STD_LOGIC;
        m_axi_gmem2_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WVALID : OUT STD_LOGIC;
        m_axi_gmem2_WREADY : IN STD_LOGIC;
        m_axi_gmem2_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_WLAST : OUT STD_LOGIC;
        m_axi_gmem2_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARVALID : OUT STD_LOGIC;
        m_axi_gmem2_ARREADY : IN STD_LOGIC;
        m_axi_gmem2_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem2_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem2_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RVALID : IN STD_LOGIC;
        m_axi_gmem2_RREADY : OUT STD_LOGIC;
        m_axi_gmem2_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem2_RLAST : IN STD_LOGIC;
        m_axi_gmem2_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BVALID : IN STD_LOGIC;
        m_axi_gmem2_BREADY : OUT STD_LOGIC;
        m_axi_gmem2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem2_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem2_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        matrixA_i : IN STD_LOGIC_VECTOR (63 downto 0);
        fifoMatrixAIdx12_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifoMatrixAIdx12_full_n : IN STD_LOGIC;
        fifoMatrixAIdx12_write : OUT STD_LOGIC;
        fifoMatrixA13_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifoMatrixA13_full_n : IN STD_LOGIC;
        fifoMatrixA13_write : OUT STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_read_B IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        K : IN STD_LOGIC_VECTOR (31 downto 0);
        N : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_AWVALID : OUT STD_LOGIC;
        m_axi_gmem3_AWREADY : IN STD_LOGIC;
        m_axi_gmem3_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WVALID : OUT STD_LOGIC;
        m_axi_gmem3_WREADY : IN STD_LOGIC;
        m_axi_gmem3_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_WLAST : OUT STD_LOGIC;
        m_axi_gmem3_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARVALID : OUT STD_LOGIC;
        m_axi_gmem3_ARREADY : IN STD_LOGIC;
        m_axi_gmem3_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem3_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem3_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem3_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RVALID : IN STD_LOGIC;
        m_axi_gmem3_RREADY : OUT STD_LOGIC;
        m_axi_gmem3_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem3_RLAST : IN STD_LOGIC;
        m_axi_gmem3_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BVALID : IN STD_LOGIC;
        m_axi_gmem3_BREADY : OUT STD_LOGIC;
        m_axi_gmem3_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem3_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem3_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        matrixB_i : IN STD_LOGIC_VECTOR (63 downto 0);
        fifoMatrixB14_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifoMatrixB14_full_n : IN STD_LOGIC;
        fifoMatrixB14_write : OUT STD_LOGIC;
        N_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        N_c_full_n : IN STD_LOGIC;
        N_c_write : OUT STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_calc_C IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        start_full_n : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        start_out : OUT STD_LOGIC;
        start_write : OUT STD_LOGIC;
        lenEdgeListPtr_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        lenEdgeListPtr_empty_n : IN STD_LOGIC;
        lenEdgeListPtr_read : OUT STD_LOGIC;
        fifoEdgeListPtr11_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifoEdgeListPtr11_empty_n : IN STD_LOGIC;
        fifoEdgeListPtr11_read : OUT STD_LOGIC;
        fifoMatrixAIdx12_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifoMatrixAIdx12_empty_n : IN STD_LOGIC;
        fifoMatrixAIdx12_read : OUT STD_LOGIC;
        fifoMatrixA13_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifoMatrixA13_empty_n : IN STD_LOGIC;
        fifoMatrixA13_read : OUT STD_LOGIC;
        fifoMatrixB14_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifoMatrixB14_empty_n : IN STD_LOGIC;
        fifoMatrixB14_read : OUT STD_LOGIC;
        fifoEdgeListPtr_calC15_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifoEdgeListPtr_calC15_full_n : IN STD_LOGIC;
        fifoEdgeListPtr_calC15_write : OUT STD_LOGIC;
        fifoMatrixCIdx_o_0_0_0_0_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        fifoMatrixCIdx_o_0_0_0_0_full_n : IN STD_LOGIC;
        fifoMatrixCIdx_o_0_0_0_0_write : OUT STD_LOGIC;
        fifoMatrixCIdx_o_0_0_0_01_din : OUT STD_LOGIC_VECTOR (15 downto 0);
        fifoMatrixCIdx_o_0_0_0_01_full_n : IN STD_LOGIC;
        fifoMatrixCIdx_o_0_0_0_01_write : OUT STD_LOGIC;
        fifoCalcMatrixC_o_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifoCalcMatrixC_o_0_full_n : IN STD_LOGIC;
        fifoCalcMatrixC_o_0_write : OUT STD_LOGIC;
        fifoCalcMatrixC_o_02_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifoCalcMatrixC_o_02_full_n : IN STD_LOGIC;
        fifoCalcMatrixC_o_02_write : OUT STD_LOGIC;
        lenEdgeListPtr_c_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        lenEdgeListPtr_c_full_n : IN STD_LOGIC;
        lenEdgeListPtr_c_write : OUT STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_sort_C IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        lenEdgeListPtr_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        lenEdgeListPtr_empty_n : IN STD_LOGIC;
        lenEdgeListPtr_read : OUT STD_LOGIC;
        fifoEdgeListPtr_calC15_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifoEdgeListPtr_calC15_empty_n : IN STD_LOGIC;
        fifoEdgeListPtr_calC15_read : OUT STD_LOGIC;
        fifoMatrixCIdx_i_0_0_0_0_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        fifoMatrixCIdx_i_0_0_0_0_empty_n : IN STD_LOGIC;
        fifoMatrixCIdx_i_0_0_0_0_read : OUT STD_LOGIC;
        fifoMatrixCIdx_i_0_0_0_01_dout : IN STD_LOGIC_VECTOR (15 downto 0);
        fifoMatrixCIdx_i_0_0_0_01_empty_n : IN STD_LOGIC;
        fifoMatrixCIdx_i_0_0_0_01_read : OUT STD_LOGIC;
        fifoCalcMatrixC_i_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifoCalcMatrixC_i_0_empty_n : IN STD_LOGIC;
        fifoCalcMatrixC_i_0_read : OUT STD_LOGIC;
        fifoCalcMatrixC_i_02_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifoCalcMatrixC_i_02_empty_n : IN STD_LOGIC;
        fifoCalcMatrixC_i_02_read : OUT STD_LOGIC;
        fifoSortMatrixC_o_0_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifoSortMatrixC_o_0_full_n : IN STD_LOGIC;
        fifoSortMatrixC_o_0_write : OUT STD_LOGIC;
        fifoSortMatrixC_o_03_din : OUT STD_LOGIC_VECTOR (31 downto 0);
        fifoSortMatrixC_o_03_full_n : IN STD_LOGIC;
        fifoSortMatrixC_o_03_write : OUT STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_write_C IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (31 downto 0);
        N_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        N_empty_n : IN STD_LOGIC;
        N_read : OUT STD_LOGIC;
        fifoSortMatrixC_i_0_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifoSortMatrixC_i_0_empty_n : IN STD_LOGIC;
        fifoSortMatrixC_i_0_read : OUT STD_LOGIC;
        fifoSortMatrixC_i_01_dout : IN STD_LOGIC_VECTOR (31 downto 0);
        fifoSortMatrixC_i_01_empty_n : IN STD_LOGIC;
        fifoSortMatrixC_i_01_read : OUT STD_LOGIC;
        m_axi_gmem4_AWVALID : OUT STD_LOGIC;
        m_axi_gmem4_AWREADY : IN STD_LOGIC;
        m_axi_gmem4_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem4_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem4_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem4_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem4_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_WVALID : OUT STD_LOGIC;
        m_axi_gmem4_WREADY : IN STD_LOGIC;
        m_axi_gmem4_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem4_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_WLAST : OUT STD_LOGIC;
        m_axi_gmem4_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_ARVALID : OUT STD_LOGIC;
        m_axi_gmem4_ARREADY : IN STD_LOGIC;
        m_axi_gmem4_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_gmem4_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem4_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem4_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_gmem4_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_gmem4_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_RVALID : IN STD_LOGIC;
        m_axi_gmem4_RREADY : OUT STD_LOGIC;
        m_axi_gmem4_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_gmem4_RLAST : IN STD_LOGIC;
        m_axi_gmem4_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_BVALID : IN STD_LOGIC;
        m_axi_gmem4_BREADY : OUT STD_LOGIC;
        m_axi_gmem4_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_gmem4_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_gmem4_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component krnl_sparse_matrix_acc_fifo_w64_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_fifo_w32_d4_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_fifo_w32_d32_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_fifo_w32_d2_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (31 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (31 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_fifo_w16_d32_S IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (15 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (15 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_start_for_calc_C_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_start_for_sort_C_U0 IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (0 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (0 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        HLSPtr_i : OUT STD_LOGIC_VECTOR (63 downto 0);
        matrixA_hls_idx : OUT STD_LOGIC_VECTOR (63 downto 0);
        matrixA_i : OUT STD_LOGIC_VECTOR (63 downto 0);
        matrixB_i : OUT STD_LOGIC_VECTOR (63 downto 0);
        matrixC_o : OUT STD_LOGIC_VECTOR (63 downto 0);
        lenEdgeListPtr : OUT STD_LOGIC_VECTOR (31 downto 0);
        lenEdgePtr : OUT STD_LOGIC_VECTOR (31 downto 0);
        M : OUT STD_LOGIC_VECTOR (31 downto 0);
        K : OUT STD_LOGIC_VECTOR (31 downto 0);
        N : OUT STD_LOGIC_VECTOR (31 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component krnl_sparse_matrix_acc_gmem0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component krnl_sparse_matrix_acc_gmem1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component krnl_sparse_matrix_acc_gmem2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component krnl_sparse_matrix_acc_gmem3_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component krnl_sparse_matrix_acc_gmem4_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        USER_MAXREQS : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_ARSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_ARPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_ARUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_ARBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_ARREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_RLAST : OUT STD_LOGIC;
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_AWSIZE : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWLOCK : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWCACHE : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWQOS : IN STD_LOGIC_VECTOR (3 downto 0);
        I_AWPROT : IN STD_LOGIC_VECTOR (2 downto 0);
        I_AWUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_AWBURST : IN STD_LOGIC_VECTOR (1 downto 0);
        I_AWREGION : IN STD_LOGIC_VECTOR (3 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WID : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        I_WLAST : IN STD_LOGIC;
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC;
        I_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        I_BID : OUT STD_LOGIC_VECTOR (0 downto 0);
        I_BUSER : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;



begin
    control_s_axi_U : component krnl_sparse_matrix_acc_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        HLSPtr_i => HLSPtr_i,
        matrixA_hls_idx => matrixA_hls_idx,
        matrixA_i => matrixA_i,
        matrixB_i => matrixB_i,
        matrixC_o => matrixC_o,
        lenEdgeListPtr => lenEdgeListPtr,
        lenEdgePtr => lenEdgePtr,
        M => M,
        K => K,
        N => N,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    gmem0_m_axi_U : component krnl_sparse_matrix_acc_gmem0_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM0_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem0_AWVALID,
        AWREADY => m_axi_gmem0_AWREADY,
        AWADDR => m_axi_gmem0_AWADDR,
        AWID => m_axi_gmem0_AWID,
        AWLEN => m_axi_gmem0_AWLEN,
        AWSIZE => m_axi_gmem0_AWSIZE,
        AWBURST => m_axi_gmem0_AWBURST,
        AWLOCK => m_axi_gmem0_AWLOCK,
        AWCACHE => m_axi_gmem0_AWCACHE,
        AWPROT => m_axi_gmem0_AWPROT,
        AWQOS => m_axi_gmem0_AWQOS,
        AWREGION => m_axi_gmem0_AWREGION,
        AWUSER => m_axi_gmem0_AWUSER,
        WVALID => m_axi_gmem0_WVALID,
        WREADY => m_axi_gmem0_WREADY,
        WDATA => m_axi_gmem0_WDATA,
        WSTRB => m_axi_gmem0_WSTRB,
        WLAST => m_axi_gmem0_WLAST,
        WID => m_axi_gmem0_WID,
        WUSER => m_axi_gmem0_WUSER,
        ARVALID => m_axi_gmem0_ARVALID,
        ARREADY => m_axi_gmem0_ARREADY,
        ARADDR => m_axi_gmem0_ARADDR,
        ARID => m_axi_gmem0_ARID,
        ARLEN => m_axi_gmem0_ARLEN,
        ARSIZE => m_axi_gmem0_ARSIZE,
        ARBURST => m_axi_gmem0_ARBURST,
        ARLOCK => m_axi_gmem0_ARLOCK,
        ARCACHE => m_axi_gmem0_ARCACHE,
        ARPROT => m_axi_gmem0_ARPROT,
        ARQOS => m_axi_gmem0_ARQOS,
        ARREGION => m_axi_gmem0_ARREGION,
        ARUSER => m_axi_gmem0_ARUSER,
        RVALID => m_axi_gmem0_RVALID,
        RREADY => m_axi_gmem0_RREADY,
        RDATA => m_axi_gmem0_RDATA,
        RLAST => m_axi_gmem0_RLAST,
        RID => m_axi_gmem0_RID,
        RUSER => m_axi_gmem0_RUSER,
        RRESP => m_axi_gmem0_RRESP,
        BVALID => m_axi_gmem0_BVALID,
        BREADY => m_axi_gmem0_BREADY,
        BRESP => m_axi_gmem0_BRESP,
        BID => m_axi_gmem0_BID,
        BUSER => m_axi_gmem0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => read_edge_list_ptr_U0_m_axi_gmem0_ARVALID,
        I_ARREADY => gmem0_ARREADY,
        I_ARADDR => read_edge_list_ptr_U0_m_axi_gmem0_ARADDR,
        I_ARID => read_edge_list_ptr_U0_m_axi_gmem0_ARID,
        I_ARLEN => read_edge_list_ptr_U0_m_axi_gmem0_ARLEN,
        I_ARSIZE => read_edge_list_ptr_U0_m_axi_gmem0_ARSIZE,
        I_ARLOCK => read_edge_list_ptr_U0_m_axi_gmem0_ARLOCK,
        I_ARCACHE => read_edge_list_ptr_U0_m_axi_gmem0_ARCACHE,
        I_ARQOS => read_edge_list_ptr_U0_m_axi_gmem0_ARQOS,
        I_ARPROT => read_edge_list_ptr_U0_m_axi_gmem0_ARPROT,
        I_ARUSER => read_edge_list_ptr_U0_m_axi_gmem0_ARUSER,
        I_ARBURST => read_edge_list_ptr_U0_m_axi_gmem0_ARBURST,
        I_ARREGION => read_edge_list_ptr_U0_m_axi_gmem0_ARREGION,
        I_RVALID => gmem0_RVALID,
        I_RREADY => read_edge_list_ptr_U0_m_axi_gmem0_RREADY,
        I_RDATA => gmem0_RDATA,
        I_RID => gmem0_RID,
        I_RUSER => gmem0_RUSER,
        I_RRESP => gmem0_RRESP,
        I_RLAST => gmem0_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem0_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem0_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem0_BRESP,
        I_BID => gmem0_BID,
        I_BUSER => gmem0_BUSER);

    gmem1_m_axi_U : component krnl_sparse_matrix_acc_gmem1_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM1_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem1_AWVALID,
        AWREADY => m_axi_gmem1_AWREADY,
        AWADDR => m_axi_gmem1_AWADDR,
        AWID => m_axi_gmem1_AWID,
        AWLEN => m_axi_gmem1_AWLEN,
        AWSIZE => m_axi_gmem1_AWSIZE,
        AWBURST => m_axi_gmem1_AWBURST,
        AWLOCK => m_axi_gmem1_AWLOCK,
        AWCACHE => m_axi_gmem1_AWCACHE,
        AWPROT => m_axi_gmem1_AWPROT,
        AWQOS => m_axi_gmem1_AWQOS,
        AWREGION => m_axi_gmem1_AWREGION,
        AWUSER => m_axi_gmem1_AWUSER,
        WVALID => m_axi_gmem1_WVALID,
        WREADY => m_axi_gmem1_WREADY,
        WDATA => m_axi_gmem1_WDATA,
        WSTRB => m_axi_gmem1_WSTRB,
        WLAST => m_axi_gmem1_WLAST,
        WID => m_axi_gmem1_WID,
        WUSER => m_axi_gmem1_WUSER,
        ARVALID => m_axi_gmem1_ARVALID,
        ARREADY => m_axi_gmem1_ARREADY,
        ARADDR => m_axi_gmem1_ARADDR,
        ARID => m_axi_gmem1_ARID,
        ARLEN => m_axi_gmem1_ARLEN,
        ARSIZE => m_axi_gmem1_ARSIZE,
        ARBURST => m_axi_gmem1_ARBURST,
        ARLOCK => m_axi_gmem1_ARLOCK,
        ARCACHE => m_axi_gmem1_ARCACHE,
        ARPROT => m_axi_gmem1_ARPROT,
        ARQOS => m_axi_gmem1_ARQOS,
        ARREGION => m_axi_gmem1_ARREGION,
        ARUSER => m_axi_gmem1_ARUSER,
        RVALID => m_axi_gmem1_RVALID,
        RREADY => m_axi_gmem1_RREADY,
        RDATA => m_axi_gmem1_RDATA,
        RLAST => m_axi_gmem1_RLAST,
        RID => m_axi_gmem1_RID,
        RUSER => m_axi_gmem1_RUSER,
        RRESP => m_axi_gmem1_RRESP,
        BVALID => m_axi_gmem1_BVALID,
        BREADY => m_axi_gmem1_BREADY,
        BRESP => m_axi_gmem1_BRESP,
        BID => m_axi_gmem1_BID,
        BUSER => m_axi_gmem1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => read_A_U0_m_axi_gmem1_ARVALID,
        I_ARREADY => gmem1_ARREADY,
        I_ARADDR => read_A_U0_m_axi_gmem1_ARADDR,
        I_ARID => read_A_U0_m_axi_gmem1_ARID,
        I_ARLEN => read_A_U0_m_axi_gmem1_ARLEN,
        I_ARSIZE => read_A_U0_m_axi_gmem1_ARSIZE,
        I_ARLOCK => read_A_U0_m_axi_gmem1_ARLOCK,
        I_ARCACHE => read_A_U0_m_axi_gmem1_ARCACHE,
        I_ARQOS => read_A_U0_m_axi_gmem1_ARQOS,
        I_ARPROT => read_A_U0_m_axi_gmem1_ARPROT,
        I_ARUSER => read_A_U0_m_axi_gmem1_ARUSER,
        I_ARBURST => read_A_U0_m_axi_gmem1_ARBURST,
        I_ARREGION => read_A_U0_m_axi_gmem1_ARREGION,
        I_RVALID => gmem1_RVALID,
        I_RREADY => read_A_U0_m_axi_gmem1_RREADY,
        I_RDATA => gmem1_RDATA,
        I_RID => gmem1_RID,
        I_RUSER => gmem1_RUSER,
        I_RRESP => gmem1_RRESP,
        I_RLAST => gmem1_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem1_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem1_BRESP,
        I_BID => gmem1_BID,
        I_BUSER => gmem1_BUSER);

    gmem2_m_axi_U : component krnl_sparse_matrix_acc_gmem2_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM2_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem2_AWVALID,
        AWREADY => m_axi_gmem2_AWREADY,
        AWADDR => m_axi_gmem2_AWADDR,
        AWID => m_axi_gmem2_AWID,
        AWLEN => m_axi_gmem2_AWLEN,
        AWSIZE => m_axi_gmem2_AWSIZE,
        AWBURST => m_axi_gmem2_AWBURST,
        AWLOCK => m_axi_gmem2_AWLOCK,
        AWCACHE => m_axi_gmem2_AWCACHE,
        AWPROT => m_axi_gmem2_AWPROT,
        AWQOS => m_axi_gmem2_AWQOS,
        AWREGION => m_axi_gmem2_AWREGION,
        AWUSER => m_axi_gmem2_AWUSER,
        WVALID => m_axi_gmem2_WVALID,
        WREADY => m_axi_gmem2_WREADY,
        WDATA => m_axi_gmem2_WDATA,
        WSTRB => m_axi_gmem2_WSTRB,
        WLAST => m_axi_gmem2_WLAST,
        WID => m_axi_gmem2_WID,
        WUSER => m_axi_gmem2_WUSER,
        ARVALID => m_axi_gmem2_ARVALID,
        ARREADY => m_axi_gmem2_ARREADY,
        ARADDR => m_axi_gmem2_ARADDR,
        ARID => m_axi_gmem2_ARID,
        ARLEN => m_axi_gmem2_ARLEN,
        ARSIZE => m_axi_gmem2_ARSIZE,
        ARBURST => m_axi_gmem2_ARBURST,
        ARLOCK => m_axi_gmem2_ARLOCK,
        ARCACHE => m_axi_gmem2_ARCACHE,
        ARPROT => m_axi_gmem2_ARPROT,
        ARQOS => m_axi_gmem2_ARQOS,
        ARREGION => m_axi_gmem2_ARREGION,
        ARUSER => m_axi_gmem2_ARUSER,
        RVALID => m_axi_gmem2_RVALID,
        RREADY => m_axi_gmem2_RREADY,
        RDATA => m_axi_gmem2_RDATA,
        RLAST => m_axi_gmem2_RLAST,
        RID => m_axi_gmem2_RID,
        RUSER => m_axi_gmem2_RUSER,
        RRESP => m_axi_gmem2_RRESP,
        BVALID => m_axi_gmem2_BVALID,
        BREADY => m_axi_gmem2_BREADY,
        BRESP => m_axi_gmem2_BRESP,
        BID => m_axi_gmem2_BID,
        BUSER => m_axi_gmem2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => read_A_U0_m_axi_gmem2_ARVALID,
        I_ARREADY => gmem2_ARREADY,
        I_ARADDR => read_A_U0_m_axi_gmem2_ARADDR,
        I_ARID => read_A_U0_m_axi_gmem2_ARID,
        I_ARLEN => read_A_U0_m_axi_gmem2_ARLEN,
        I_ARSIZE => read_A_U0_m_axi_gmem2_ARSIZE,
        I_ARLOCK => read_A_U0_m_axi_gmem2_ARLOCK,
        I_ARCACHE => read_A_U0_m_axi_gmem2_ARCACHE,
        I_ARQOS => read_A_U0_m_axi_gmem2_ARQOS,
        I_ARPROT => read_A_U0_m_axi_gmem2_ARPROT,
        I_ARUSER => read_A_U0_m_axi_gmem2_ARUSER,
        I_ARBURST => read_A_U0_m_axi_gmem2_ARBURST,
        I_ARREGION => read_A_U0_m_axi_gmem2_ARREGION,
        I_RVALID => gmem2_RVALID,
        I_RREADY => read_A_U0_m_axi_gmem2_RREADY,
        I_RDATA => gmem2_RDATA,
        I_RID => gmem2_RID,
        I_RUSER => gmem2_RUSER,
        I_RRESP => gmem2_RRESP,
        I_RLAST => gmem2_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem2_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem2_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem2_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem2_BRESP,
        I_BID => gmem2_BID,
        I_BUSER => gmem2_BUSER);

    gmem3_m_axi_U : component krnl_sparse_matrix_acc_gmem3_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM3_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM3_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM3_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM3_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM3_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM3_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM3_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM3_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM3_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM3_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM3_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem3_AWVALID,
        AWREADY => m_axi_gmem3_AWREADY,
        AWADDR => m_axi_gmem3_AWADDR,
        AWID => m_axi_gmem3_AWID,
        AWLEN => m_axi_gmem3_AWLEN,
        AWSIZE => m_axi_gmem3_AWSIZE,
        AWBURST => m_axi_gmem3_AWBURST,
        AWLOCK => m_axi_gmem3_AWLOCK,
        AWCACHE => m_axi_gmem3_AWCACHE,
        AWPROT => m_axi_gmem3_AWPROT,
        AWQOS => m_axi_gmem3_AWQOS,
        AWREGION => m_axi_gmem3_AWREGION,
        AWUSER => m_axi_gmem3_AWUSER,
        WVALID => m_axi_gmem3_WVALID,
        WREADY => m_axi_gmem3_WREADY,
        WDATA => m_axi_gmem3_WDATA,
        WSTRB => m_axi_gmem3_WSTRB,
        WLAST => m_axi_gmem3_WLAST,
        WID => m_axi_gmem3_WID,
        WUSER => m_axi_gmem3_WUSER,
        ARVALID => m_axi_gmem3_ARVALID,
        ARREADY => m_axi_gmem3_ARREADY,
        ARADDR => m_axi_gmem3_ARADDR,
        ARID => m_axi_gmem3_ARID,
        ARLEN => m_axi_gmem3_ARLEN,
        ARSIZE => m_axi_gmem3_ARSIZE,
        ARBURST => m_axi_gmem3_ARBURST,
        ARLOCK => m_axi_gmem3_ARLOCK,
        ARCACHE => m_axi_gmem3_ARCACHE,
        ARPROT => m_axi_gmem3_ARPROT,
        ARQOS => m_axi_gmem3_ARQOS,
        ARREGION => m_axi_gmem3_ARREGION,
        ARUSER => m_axi_gmem3_ARUSER,
        RVALID => m_axi_gmem3_RVALID,
        RREADY => m_axi_gmem3_RREADY,
        RDATA => m_axi_gmem3_RDATA,
        RLAST => m_axi_gmem3_RLAST,
        RID => m_axi_gmem3_RID,
        RUSER => m_axi_gmem3_RUSER,
        RRESP => m_axi_gmem3_RRESP,
        BVALID => m_axi_gmem3_BVALID,
        BREADY => m_axi_gmem3_BREADY,
        BRESP => m_axi_gmem3_BRESP,
        BID => m_axi_gmem3_BID,
        BUSER => m_axi_gmem3_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => read_B_U0_m_axi_gmem3_ARVALID,
        I_ARREADY => gmem3_ARREADY,
        I_ARADDR => read_B_U0_m_axi_gmem3_ARADDR,
        I_ARID => read_B_U0_m_axi_gmem3_ARID,
        I_ARLEN => read_B_U0_m_axi_gmem3_ARLEN,
        I_ARSIZE => read_B_U0_m_axi_gmem3_ARSIZE,
        I_ARLOCK => read_B_U0_m_axi_gmem3_ARLOCK,
        I_ARCACHE => read_B_U0_m_axi_gmem3_ARCACHE,
        I_ARQOS => read_B_U0_m_axi_gmem3_ARQOS,
        I_ARPROT => read_B_U0_m_axi_gmem3_ARPROT,
        I_ARUSER => read_B_U0_m_axi_gmem3_ARUSER,
        I_ARBURST => read_B_U0_m_axi_gmem3_ARBURST,
        I_ARREGION => read_B_U0_m_axi_gmem3_ARREGION,
        I_RVALID => gmem3_RVALID,
        I_RREADY => read_B_U0_m_axi_gmem3_RREADY,
        I_RDATA => gmem3_RDATA,
        I_RID => gmem3_RID,
        I_RUSER => gmem3_RUSER,
        I_RRESP => gmem3_RRESP,
        I_RLAST => gmem3_RLAST,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => gmem3_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWID => ap_const_lv1_0,
        I_AWLEN => ap_const_lv32_0,
        I_AWSIZE => ap_const_lv3_0,
        I_AWLOCK => ap_const_lv2_0,
        I_AWCACHE => ap_const_lv4_0,
        I_AWQOS => ap_const_lv4_0,
        I_AWPROT => ap_const_lv3_0,
        I_AWUSER => ap_const_lv1_0,
        I_AWBURST => ap_const_lv2_0,
        I_AWREGION => ap_const_lv4_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => gmem3_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WID => ap_const_lv1_0,
        I_WUSER => ap_const_lv1_0,
        I_WLAST => ap_const_logic_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => gmem3_BVALID,
        I_BREADY => ap_const_logic_0,
        I_BRESP => gmem3_BRESP,
        I_BID => gmem3_BID,
        I_BUSER => gmem3_BUSER);

    gmem4_m_axi_U : component krnl_sparse_matrix_acc_gmem4_m_axi
    generic map (
        CONSERVATIVE => 0,
        USER_DW => 32,
        USER_AW => 64,
        USER_MAXREQS => 5,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_GMEM4_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_GMEM4_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_GMEM4_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_GMEM4_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_GMEM4_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_GMEM4_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_GMEM4_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_GMEM4_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_GMEM4_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_GMEM4_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_GMEM4_CACHE_VALUE)
    port map (
        AWVALID => m_axi_gmem4_AWVALID,
        AWREADY => m_axi_gmem4_AWREADY,
        AWADDR => m_axi_gmem4_AWADDR,
        AWID => m_axi_gmem4_AWID,
        AWLEN => m_axi_gmem4_AWLEN,
        AWSIZE => m_axi_gmem4_AWSIZE,
        AWBURST => m_axi_gmem4_AWBURST,
        AWLOCK => m_axi_gmem4_AWLOCK,
        AWCACHE => m_axi_gmem4_AWCACHE,
        AWPROT => m_axi_gmem4_AWPROT,
        AWQOS => m_axi_gmem4_AWQOS,
        AWREGION => m_axi_gmem4_AWREGION,
        AWUSER => m_axi_gmem4_AWUSER,
        WVALID => m_axi_gmem4_WVALID,
        WREADY => m_axi_gmem4_WREADY,
        WDATA => m_axi_gmem4_WDATA,
        WSTRB => m_axi_gmem4_WSTRB,
        WLAST => m_axi_gmem4_WLAST,
        WID => m_axi_gmem4_WID,
        WUSER => m_axi_gmem4_WUSER,
        ARVALID => m_axi_gmem4_ARVALID,
        ARREADY => m_axi_gmem4_ARREADY,
        ARADDR => m_axi_gmem4_ARADDR,
        ARID => m_axi_gmem4_ARID,
        ARLEN => m_axi_gmem4_ARLEN,
        ARSIZE => m_axi_gmem4_ARSIZE,
        ARBURST => m_axi_gmem4_ARBURST,
        ARLOCK => m_axi_gmem4_ARLOCK,
        ARCACHE => m_axi_gmem4_ARCACHE,
        ARPROT => m_axi_gmem4_ARPROT,
        ARQOS => m_axi_gmem4_ARQOS,
        ARREGION => m_axi_gmem4_ARREGION,
        ARUSER => m_axi_gmem4_ARUSER,
        RVALID => m_axi_gmem4_RVALID,
        RREADY => m_axi_gmem4_RREADY,
        RDATA => m_axi_gmem4_RDATA,
        RLAST => m_axi_gmem4_RLAST,
        RID => m_axi_gmem4_RID,
        RUSER => m_axi_gmem4_RUSER,
        RRESP => m_axi_gmem4_RRESP,
        BVALID => m_axi_gmem4_BVALID,
        BREADY => m_axi_gmem4_BREADY,
        BRESP => m_axi_gmem4_BRESP,
        BID => m_axi_gmem4_BID,
        BUSER => m_axi_gmem4_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => gmem4_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARID => ap_const_lv1_0,
        I_ARLEN => ap_const_lv32_0,
        I_ARSIZE => ap_const_lv3_0,
        I_ARLOCK => ap_const_lv2_0,
        I_ARCACHE => ap_const_lv4_0,
        I_ARQOS => ap_const_lv4_0,
        I_ARPROT => ap_const_lv3_0,
        I_ARUSER => ap_const_lv1_0,
        I_ARBURST => ap_const_lv2_0,
        I_ARREGION => ap_const_lv4_0,
        I_RVALID => gmem4_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => gmem4_RDATA,
        I_RID => gmem4_RID,
        I_RUSER => gmem4_RUSER,
        I_RRESP => gmem4_RRESP,
        I_RLAST => gmem4_RLAST,
        I_AWVALID => write_C_U0_m_axi_gmem4_AWVALID,
        I_AWREADY => gmem4_AWREADY,
        I_AWADDR => write_C_U0_m_axi_gmem4_AWADDR,
        I_AWID => write_C_U0_m_axi_gmem4_AWID,
        I_AWLEN => write_C_U0_m_axi_gmem4_AWLEN,
        I_AWSIZE => write_C_U0_m_axi_gmem4_AWSIZE,
        I_AWLOCK => write_C_U0_m_axi_gmem4_AWLOCK,
        I_AWCACHE => write_C_U0_m_axi_gmem4_AWCACHE,
        I_AWQOS => write_C_U0_m_axi_gmem4_AWQOS,
        I_AWPROT => write_C_U0_m_axi_gmem4_AWPROT,
        I_AWUSER => write_C_U0_m_axi_gmem4_AWUSER,
        I_AWBURST => write_C_U0_m_axi_gmem4_AWBURST,
        I_AWREGION => write_C_U0_m_axi_gmem4_AWREGION,
        I_WVALID => write_C_U0_m_axi_gmem4_WVALID,
        I_WREADY => gmem4_WREADY,
        I_WDATA => write_C_U0_m_axi_gmem4_WDATA,
        I_WID => write_C_U0_m_axi_gmem4_WID,
        I_WUSER => write_C_U0_m_axi_gmem4_WUSER,
        I_WLAST => write_C_U0_m_axi_gmem4_WLAST,
        I_WSTRB => write_C_U0_m_axi_gmem4_WSTRB,
        I_BVALID => gmem4_BVALID,
        I_BREADY => write_C_U0_m_axi_gmem4_BREADY,
        I_BRESP => gmem4_BRESP,
        I_BID => gmem4_BID,
        I_BUSER => gmem4_BUSER);

    entry_proc_U0 : component krnl_sparse_matrix_acc_entry_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => entry_proc_U0_ap_start,
        ap_done => entry_proc_U0_ap_done,
        ap_continue => entry_proc_U0_ap_continue,
        ap_idle => entry_proc_U0_ap_idle,
        ap_ready => entry_proc_U0_ap_ready,
        matrixC_o => matrixC_o,
        M => M,
        ap_return_0 => entry_proc_U0_ap_return_0,
        ap_return_1 => entry_proc_U0_ap_return_1);

    read_edge_list_ptr_U0 : component krnl_sparse_matrix_acc_read_edge_list_ptr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read_edge_list_ptr_U0_ap_start,
        start_full_n => start_for_calc_C_U0_full_n,
        ap_done => read_edge_list_ptr_U0_ap_done,
        ap_continue => read_edge_list_ptr_U0_ap_continue,
        ap_idle => read_edge_list_ptr_U0_ap_idle,
        ap_ready => read_edge_list_ptr_U0_ap_ready,
        start_out => read_edge_list_ptr_U0_start_out,
        start_write => read_edge_list_ptr_U0_start_write,
        lenEdgeListPtr => lenEdgeListPtr,
        m_axi_gmem0_AWVALID => read_edge_list_ptr_U0_m_axi_gmem0_AWVALID,
        m_axi_gmem0_AWREADY => ap_const_logic_0,
        m_axi_gmem0_AWADDR => read_edge_list_ptr_U0_m_axi_gmem0_AWADDR,
        m_axi_gmem0_AWID => read_edge_list_ptr_U0_m_axi_gmem0_AWID,
        m_axi_gmem0_AWLEN => read_edge_list_ptr_U0_m_axi_gmem0_AWLEN,
        m_axi_gmem0_AWSIZE => read_edge_list_ptr_U0_m_axi_gmem0_AWSIZE,
        m_axi_gmem0_AWBURST => read_edge_list_ptr_U0_m_axi_gmem0_AWBURST,
        m_axi_gmem0_AWLOCK => read_edge_list_ptr_U0_m_axi_gmem0_AWLOCK,
        m_axi_gmem0_AWCACHE => read_edge_list_ptr_U0_m_axi_gmem0_AWCACHE,
        m_axi_gmem0_AWPROT => read_edge_list_ptr_U0_m_axi_gmem0_AWPROT,
        m_axi_gmem0_AWQOS => read_edge_list_ptr_U0_m_axi_gmem0_AWQOS,
        m_axi_gmem0_AWREGION => read_edge_list_ptr_U0_m_axi_gmem0_AWREGION,
        m_axi_gmem0_AWUSER => read_edge_list_ptr_U0_m_axi_gmem0_AWUSER,
        m_axi_gmem0_WVALID => read_edge_list_ptr_U0_m_axi_gmem0_WVALID,
        m_axi_gmem0_WREADY => ap_const_logic_0,
        m_axi_gmem0_WDATA => read_edge_list_ptr_U0_m_axi_gmem0_WDATA,
        m_axi_gmem0_WSTRB => read_edge_list_ptr_U0_m_axi_gmem0_WSTRB,
        m_axi_gmem0_WLAST => read_edge_list_ptr_U0_m_axi_gmem0_WLAST,
        m_axi_gmem0_WID => read_edge_list_ptr_U0_m_axi_gmem0_WID,
        m_axi_gmem0_WUSER => read_edge_list_ptr_U0_m_axi_gmem0_WUSER,
        m_axi_gmem0_ARVALID => read_edge_list_ptr_U0_m_axi_gmem0_ARVALID,
        m_axi_gmem0_ARREADY => gmem0_ARREADY,
        m_axi_gmem0_ARADDR => read_edge_list_ptr_U0_m_axi_gmem0_ARADDR,
        m_axi_gmem0_ARID => read_edge_list_ptr_U0_m_axi_gmem0_ARID,
        m_axi_gmem0_ARLEN => read_edge_list_ptr_U0_m_axi_gmem0_ARLEN,
        m_axi_gmem0_ARSIZE => read_edge_list_ptr_U0_m_axi_gmem0_ARSIZE,
        m_axi_gmem0_ARBURST => read_edge_list_ptr_U0_m_axi_gmem0_ARBURST,
        m_axi_gmem0_ARLOCK => read_edge_list_ptr_U0_m_axi_gmem0_ARLOCK,
        m_axi_gmem0_ARCACHE => read_edge_list_ptr_U0_m_axi_gmem0_ARCACHE,
        m_axi_gmem0_ARPROT => read_edge_list_ptr_U0_m_axi_gmem0_ARPROT,
        m_axi_gmem0_ARQOS => read_edge_list_ptr_U0_m_axi_gmem0_ARQOS,
        m_axi_gmem0_ARREGION => read_edge_list_ptr_U0_m_axi_gmem0_ARREGION,
        m_axi_gmem0_ARUSER => read_edge_list_ptr_U0_m_axi_gmem0_ARUSER,
        m_axi_gmem0_RVALID => gmem0_RVALID,
        m_axi_gmem0_RREADY => read_edge_list_ptr_U0_m_axi_gmem0_RREADY,
        m_axi_gmem0_RDATA => gmem0_RDATA,
        m_axi_gmem0_RLAST => gmem0_RLAST,
        m_axi_gmem0_RID => gmem0_RID,
        m_axi_gmem0_RUSER => gmem0_RUSER,
        m_axi_gmem0_RRESP => gmem0_RRESP,
        m_axi_gmem0_BVALID => ap_const_logic_0,
        m_axi_gmem0_BREADY => read_edge_list_ptr_U0_m_axi_gmem0_BREADY,
        m_axi_gmem0_BRESP => ap_const_lv2_0,
        m_axi_gmem0_BID => ap_const_lv1_0,
        m_axi_gmem0_BUSER => ap_const_lv1_0,
        HLSPtr_i => HLSPtr_i,
        fifoEdgeListPtr11_din => read_edge_list_ptr_U0_fifoEdgeListPtr11_din,
        fifoEdgeListPtr11_full_n => fifoEdgeListPtr_full_n,
        fifoEdgeListPtr11_write => read_edge_list_ptr_U0_fifoEdgeListPtr11_write,
        lenEdgeListPtr_c27_din => read_edge_list_ptr_U0_lenEdgeListPtr_c27_din,
        lenEdgeListPtr_c27_full_n => lenEdgeListPtr_c27_full_n,
        lenEdgeListPtr_c27_write => read_edge_list_ptr_U0_lenEdgeListPtr_c27_write);

    read_A_U0 : component krnl_sparse_matrix_acc_read_A
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read_A_U0_ap_start,
        ap_done => read_A_U0_ap_done,
        ap_continue => read_A_U0_ap_continue,
        ap_idle => read_A_U0_ap_idle,
        ap_ready => read_A_U0_ap_ready,
        lenEdgePtr => lenEdgePtr,
        m_axi_gmem1_AWVALID => read_A_U0_m_axi_gmem1_AWVALID,
        m_axi_gmem1_AWREADY => ap_const_logic_0,
        m_axi_gmem1_AWADDR => read_A_U0_m_axi_gmem1_AWADDR,
        m_axi_gmem1_AWID => read_A_U0_m_axi_gmem1_AWID,
        m_axi_gmem1_AWLEN => read_A_U0_m_axi_gmem1_AWLEN,
        m_axi_gmem1_AWSIZE => read_A_U0_m_axi_gmem1_AWSIZE,
        m_axi_gmem1_AWBURST => read_A_U0_m_axi_gmem1_AWBURST,
        m_axi_gmem1_AWLOCK => read_A_U0_m_axi_gmem1_AWLOCK,
        m_axi_gmem1_AWCACHE => read_A_U0_m_axi_gmem1_AWCACHE,
        m_axi_gmem1_AWPROT => read_A_U0_m_axi_gmem1_AWPROT,
        m_axi_gmem1_AWQOS => read_A_U0_m_axi_gmem1_AWQOS,
        m_axi_gmem1_AWREGION => read_A_U0_m_axi_gmem1_AWREGION,
        m_axi_gmem1_AWUSER => read_A_U0_m_axi_gmem1_AWUSER,
        m_axi_gmem1_WVALID => read_A_U0_m_axi_gmem1_WVALID,
        m_axi_gmem1_WREADY => ap_const_logic_0,
        m_axi_gmem1_WDATA => read_A_U0_m_axi_gmem1_WDATA,
        m_axi_gmem1_WSTRB => read_A_U0_m_axi_gmem1_WSTRB,
        m_axi_gmem1_WLAST => read_A_U0_m_axi_gmem1_WLAST,
        m_axi_gmem1_WID => read_A_U0_m_axi_gmem1_WID,
        m_axi_gmem1_WUSER => read_A_U0_m_axi_gmem1_WUSER,
        m_axi_gmem1_ARVALID => read_A_U0_m_axi_gmem1_ARVALID,
        m_axi_gmem1_ARREADY => gmem1_ARREADY,
        m_axi_gmem1_ARADDR => read_A_U0_m_axi_gmem1_ARADDR,
        m_axi_gmem1_ARID => read_A_U0_m_axi_gmem1_ARID,
        m_axi_gmem1_ARLEN => read_A_U0_m_axi_gmem1_ARLEN,
        m_axi_gmem1_ARSIZE => read_A_U0_m_axi_gmem1_ARSIZE,
        m_axi_gmem1_ARBURST => read_A_U0_m_axi_gmem1_ARBURST,
        m_axi_gmem1_ARLOCK => read_A_U0_m_axi_gmem1_ARLOCK,
        m_axi_gmem1_ARCACHE => read_A_U0_m_axi_gmem1_ARCACHE,
        m_axi_gmem1_ARPROT => read_A_U0_m_axi_gmem1_ARPROT,
        m_axi_gmem1_ARQOS => read_A_U0_m_axi_gmem1_ARQOS,
        m_axi_gmem1_ARREGION => read_A_U0_m_axi_gmem1_ARREGION,
        m_axi_gmem1_ARUSER => read_A_U0_m_axi_gmem1_ARUSER,
        m_axi_gmem1_RVALID => gmem1_RVALID,
        m_axi_gmem1_RREADY => read_A_U0_m_axi_gmem1_RREADY,
        m_axi_gmem1_RDATA => gmem1_RDATA,
        m_axi_gmem1_RLAST => gmem1_RLAST,
        m_axi_gmem1_RID => gmem1_RID,
        m_axi_gmem1_RUSER => gmem1_RUSER,
        m_axi_gmem1_RRESP => gmem1_RRESP,
        m_axi_gmem1_BVALID => ap_const_logic_0,
        m_axi_gmem1_BREADY => read_A_U0_m_axi_gmem1_BREADY,
        m_axi_gmem1_BRESP => ap_const_lv2_0,
        m_axi_gmem1_BID => ap_const_lv1_0,
        m_axi_gmem1_BUSER => ap_const_lv1_0,
        matrixA_hls_idx => matrixA_hls_idx,
        m_axi_gmem2_AWVALID => read_A_U0_m_axi_gmem2_AWVALID,
        m_axi_gmem2_AWREADY => ap_const_logic_0,
        m_axi_gmem2_AWADDR => read_A_U0_m_axi_gmem2_AWADDR,
        m_axi_gmem2_AWID => read_A_U0_m_axi_gmem2_AWID,
        m_axi_gmem2_AWLEN => read_A_U0_m_axi_gmem2_AWLEN,
        m_axi_gmem2_AWSIZE => read_A_U0_m_axi_gmem2_AWSIZE,
        m_axi_gmem2_AWBURST => read_A_U0_m_axi_gmem2_AWBURST,
        m_axi_gmem2_AWLOCK => read_A_U0_m_axi_gmem2_AWLOCK,
        m_axi_gmem2_AWCACHE => read_A_U0_m_axi_gmem2_AWCACHE,
        m_axi_gmem2_AWPROT => read_A_U0_m_axi_gmem2_AWPROT,
        m_axi_gmem2_AWQOS => read_A_U0_m_axi_gmem2_AWQOS,
        m_axi_gmem2_AWREGION => read_A_U0_m_axi_gmem2_AWREGION,
        m_axi_gmem2_AWUSER => read_A_U0_m_axi_gmem2_AWUSER,
        m_axi_gmem2_WVALID => read_A_U0_m_axi_gmem2_WVALID,
        m_axi_gmem2_WREADY => ap_const_logic_0,
        m_axi_gmem2_WDATA => read_A_U0_m_axi_gmem2_WDATA,
        m_axi_gmem2_WSTRB => read_A_U0_m_axi_gmem2_WSTRB,
        m_axi_gmem2_WLAST => read_A_U0_m_axi_gmem2_WLAST,
        m_axi_gmem2_WID => read_A_U0_m_axi_gmem2_WID,
        m_axi_gmem2_WUSER => read_A_U0_m_axi_gmem2_WUSER,
        m_axi_gmem2_ARVALID => read_A_U0_m_axi_gmem2_ARVALID,
        m_axi_gmem2_ARREADY => gmem2_ARREADY,
        m_axi_gmem2_ARADDR => read_A_U0_m_axi_gmem2_ARADDR,
        m_axi_gmem2_ARID => read_A_U0_m_axi_gmem2_ARID,
        m_axi_gmem2_ARLEN => read_A_U0_m_axi_gmem2_ARLEN,
        m_axi_gmem2_ARSIZE => read_A_U0_m_axi_gmem2_ARSIZE,
        m_axi_gmem2_ARBURST => read_A_U0_m_axi_gmem2_ARBURST,
        m_axi_gmem2_ARLOCK => read_A_U0_m_axi_gmem2_ARLOCK,
        m_axi_gmem2_ARCACHE => read_A_U0_m_axi_gmem2_ARCACHE,
        m_axi_gmem2_ARPROT => read_A_U0_m_axi_gmem2_ARPROT,
        m_axi_gmem2_ARQOS => read_A_U0_m_axi_gmem2_ARQOS,
        m_axi_gmem2_ARREGION => read_A_U0_m_axi_gmem2_ARREGION,
        m_axi_gmem2_ARUSER => read_A_U0_m_axi_gmem2_ARUSER,
        m_axi_gmem2_RVALID => gmem2_RVALID,
        m_axi_gmem2_RREADY => read_A_U0_m_axi_gmem2_RREADY,
        m_axi_gmem2_RDATA => gmem2_RDATA,
        m_axi_gmem2_RLAST => gmem2_RLAST,
        m_axi_gmem2_RID => gmem2_RID,
        m_axi_gmem2_RUSER => gmem2_RUSER,
        m_axi_gmem2_RRESP => gmem2_RRESP,
        m_axi_gmem2_BVALID => ap_const_logic_0,
        m_axi_gmem2_BREADY => read_A_U0_m_axi_gmem2_BREADY,
        m_axi_gmem2_BRESP => ap_const_lv2_0,
        m_axi_gmem2_BID => ap_const_lv1_0,
        m_axi_gmem2_BUSER => ap_const_lv1_0,
        matrixA_i => matrixA_i,
        fifoMatrixAIdx12_din => read_A_U0_fifoMatrixAIdx12_din,
        fifoMatrixAIdx12_full_n => fifoMatrixAIdx_full_n,
        fifoMatrixAIdx12_write => read_A_U0_fifoMatrixAIdx12_write,
        fifoMatrixA13_din => read_A_U0_fifoMatrixA13_din,
        fifoMatrixA13_full_n => fifoMatrixA_full_n,
        fifoMatrixA13_write => read_A_U0_fifoMatrixA13_write);

    read_B_U0 : component krnl_sparse_matrix_acc_read_B
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => read_B_U0_ap_start,
        ap_done => read_B_U0_ap_done,
        ap_continue => read_B_U0_ap_continue,
        ap_idle => read_B_U0_ap_idle,
        ap_ready => read_B_U0_ap_ready,
        K => K,
        N => N,
        m_axi_gmem3_AWVALID => read_B_U0_m_axi_gmem3_AWVALID,
        m_axi_gmem3_AWREADY => ap_const_logic_0,
        m_axi_gmem3_AWADDR => read_B_U0_m_axi_gmem3_AWADDR,
        m_axi_gmem3_AWID => read_B_U0_m_axi_gmem3_AWID,
        m_axi_gmem3_AWLEN => read_B_U0_m_axi_gmem3_AWLEN,
        m_axi_gmem3_AWSIZE => read_B_U0_m_axi_gmem3_AWSIZE,
        m_axi_gmem3_AWBURST => read_B_U0_m_axi_gmem3_AWBURST,
        m_axi_gmem3_AWLOCK => read_B_U0_m_axi_gmem3_AWLOCK,
        m_axi_gmem3_AWCACHE => read_B_U0_m_axi_gmem3_AWCACHE,
        m_axi_gmem3_AWPROT => read_B_U0_m_axi_gmem3_AWPROT,
        m_axi_gmem3_AWQOS => read_B_U0_m_axi_gmem3_AWQOS,
        m_axi_gmem3_AWREGION => read_B_U0_m_axi_gmem3_AWREGION,
        m_axi_gmem3_AWUSER => read_B_U0_m_axi_gmem3_AWUSER,
        m_axi_gmem3_WVALID => read_B_U0_m_axi_gmem3_WVALID,
        m_axi_gmem3_WREADY => ap_const_logic_0,
        m_axi_gmem3_WDATA => read_B_U0_m_axi_gmem3_WDATA,
        m_axi_gmem3_WSTRB => read_B_U0_m_axi_gmem3_WSTRB,
        m_axi_gmem3_WLAST => read_B_U0_m_axi_gmem3_WLAST,
        m_axi_gmem3_WID => read_B_U0_m_axi_gmem3_WID,
        m_axi_gmem3_WUSER => read_B_U0_m_axi_gmem3_WUSER,
        m_axi_gmem3_ARVALID => read_B_U0_m_axi_gmem3_ARVALID,
        m_axi_gmem3_ARREADY => gmem3_ARREADY,
        m_axi_gmem3_ARADDR => read_B_U0_m_axi_gmem3_ARADDR,
        m_axi_gmem3_ARID => read_B_U0_m_axi_gmem3_ARID,
        m_axi_gmem3_ARLEN => read_B_U0_m_axi_gmem3_ARLEN,
        m_axi_gmem3_ARSIZE => read_B_U0_m_axi_gmem3_ARSIZE,
        m_axi_gmem3_ARBURST => read_B_U0_m_axi_gmem3_ARBURST,
        m_axi_gmem3_ARLOCK => read_B_U0_m_axi_gmem3_ARLOCK,
        m_axi_gmem3_ARCACHE => read_B_U0_m_axi_gmem3_ARCACHE,
        m_axi_gmem3_ARPROT => read_B_U0_m_axi_gmem3_ARPROT,
        m_axi_gmem3_ARQOS => read_B_U0_m_axi_gmem3_ARQOS,
        m_axi_gmem3_ARREGION => read_B_U0_m_axi_gmem3_ARREGION,
        m_axi_gmem3_ARUSER => read_B_U0_m_axi_gmem3_ARUSER,
        m_axi_gmem3_RVALID => gmem3_RVALID,
        m_axi_gmem3_RREADY => read_B_U0_m_axi_gmem3_RREADY,
        m_axi_gmem3_RDATA => gmem3_RDATA,
        m_axi_gmem3_RLAST => gmem3_RLAST,
        m_axi_gmem3_RID => gmem3_RID,
        m_axi_gmem3_RUSER => gmem3_RUSER,
        m_axi_gmem3_RRESP => gmem3_RRESP,
        m_axi_gmem3_BVALID => ap_const_logic_0,
        m_axi_gmem3_BREADY => read_B_U0_m_axi_gmem3_BREADY,
        m_axi_gmem3_BRESP => ap_const_lv2_0,
        m_axi_gmem3_BID => ap_const_lv1_0,
        m_axi_gmem3_BUSER => ap_const_lv1_0,
        matrixB_i => matrixB_i,
        fifoMatrixB14_din => read_B_U0_fifoMatrixB14_din,
        fifoMatrixB14_full_n => fifoMatrixB_full_n,
        fifoMatrixB14_write => read_B_U0_fifoMatrixB14_write,
        N_c_din => read_B_U0_N_c_din,
        N_c_full_n => N_c_full_n,
        N_c_write => read_B_U0_N_c_write);

    calc_C_U0 : component krnl_sparse_matrix_acc_calc_C
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => calc_C_U0_ap_start,
        start_full_n => start_for_sort_C_U0_full_n,
        ap_done => calc_C_U0_ap_done,
        ap_continue => calc_C_U0_ap_continue,
        ap_idle => calc_C_U0_ap_idle,
        ap_ready => calc_C_U0_ap_ready,
        start_out => calc_C_U0_start_out,
        start_write => calc_C_U0_start_write,
        lenEdgeListPtr_dout => lenEdgeListPtr_c27_dout,
        lenEdgeListPtr_empty_n => lenEdgeListPtr_c27_empty_n,
        lenEdgeListPtr_read => calc_C_U0_lenEdgeListPtr_read,
        fifoEdgeListPtr11_dout => fifoEdgeListPtr_dout,
        fifoEdgeListPtr11_empty_n => fifoEdgeListPtr_empty_n,
        fifoEdgeListPtr11_read => calc_C_U0_fifoEdgeListPtr11_read,
        fifoMatrixAIdx12_dout => fifoMatrixAIdx_dout,
        fifoMatrixAIdx12_empty_n => fifoMatrixAIdx_empty_n,
        fifoMatrixAIdx12_read => calc_C_U0_fifoMatrixAIdx12_read,
        fifoMatrixA13_dout => fifoMatrixA_dout,
        fifoMatrixA13_empty_n => fifoMatrixA_empty_n,
        fifoMatrixA13_read => calc_C_U0_fifoMatrixA13_read,
        fifoMatrixB14_dout => fifoMatrixB_dout,
        fifoMatrixB14_empty_n => fifoMatrixB_empty_n,
        fifoMatrixB14_read => calc_C_U0_fifoMatrixB14_read,
        fifoEdgeListPtr_calC15_din => calc_C_U0_fifoEdgeListPtr_calC15_din,
        fifoEdgeListPtr_calC15_full_n => fifoEdgeListPtr_calC_full_n,
        fifoEdgeListPtr_calC15_write => calc_C_U0_fifoEdgeListPtr_calC15_write,
        fifoMatrixCIdx_o_0_0_0_0_din => calc_C_U0_fifoMatrixCIdx_o_0_0_0_0_din,
        fifoMatrixCIdx_o_0_0_0_0_full_n => fifoMatrixCIdxArray_V_V_0_full_n,
        fifoMatrixCIdx_o_0_0_0_0_write => calc_C_U0_fifoMatrixCIdx_o_0_0_0_0_write,
        fifoMatrixCIdx_o_0_0_0_01_din => calc_C_U0_fifoMatrixCIdx_o_0_0_0_01_din,
        fifoMatrixCIdx_o_0_0_0_01_full_n => fifoMatrixCIdxArray_V_V_1_full_n,
        fifoMatrixCIdx_o_0_0_0_01_write => calc_C_U0_fifoMatrixCIdx_o_0_0_0_01_write,
        fifoCalcMatrixC_o_0_din => calc_C_U0_fifoCalcMatrixC_o_0_din,
        fifoCalcMatrixC_o_0_full_n => fifoCalcMatrixCArray_V_0_full_n,
        fifoCalcMatrixC_o_0_write => calc_C_U0_fifoCalcMatrixC_o_0_write,
        fifoCalcMatrixC_o_02_din => calc_C_U0_fifoCalcMatrixC_o_02_din,
        fifoCalcMatrixC_o_02_full_n => fifoCalcMatrixCArray_V_1_full_n,
        fifoCalcMatrixC_o_02_write => calc_C_U0_fifoCalcMatrixC_o_02_write,
        lenEdgeListPtr_c_din => calc_C_U0_lenEdgeListPtr_c_din,
        lenEdgeListPtr_c_full_n => lenEdgeListPtr_c_full_n,
        lenEdgeListPtr_c_write => calc_C_U0_lenEdgeListPtr_c_write);

    sort_C_U0 : component krnl_sparse_matrix_acc_sort_C
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => sort_C_U0_ap_start,
        ap_done => sort_C_U0_ap_done,
        ap_continue => sort_C_U0_ap_continue,
        ap_idle => sort_C_U0_ap_idle,
        ap_ready => sort_C_U0_ap_ready,
        lenEdgeListPtr_dout => lenEdgeListPtr_c_dout,
        lenEdgeListPtr_empty_n => lenEdgeListPtr_c_empty_n,
        lenEdgeListPtr_read => sort_C_U0_lenEdgeListPtr_read,
        fifoEdgeListPtr_calC15_dout => fifoEdgeListPtr_calC_dout,
        fifoEdgeListPtr_calC15_empty_n => fifoEdgeListPtr_calC_empty_n,
        fifoEdgeListPtr_calC15_read => sort_C_U0_fifoEdgeListPtr_calC15_read,
        fifoMatrixCIdx_i_0_0_0_0_dout => fifoMatrixCIdxArray_V_V_0_dout,
        fifoMatrixCIdx_i_0_0_0_0_empty_n => fifoMatrixCIdxArray_V_V_0_empty_n,
        fifoMatrixCIdx_i_0_0_0_0_read => sort_C_U0_fifoMatrixCIdx_i_0_0_0_0_read,
        fifoMatrixCIdx_i_0_0_0_01_dout => fifoMatrixCIdxArray_V_V_1_dout,
        fifoMatrixCIdx_i_0_0_0_01_empty_n => fifoMatrixCIdxArray_V_V_1_empty_n,
        fifoMatrixCIdx_i_0_0_0_01_read => sort_C_U0_fifoMatrixCIdx_i_0_0_0_01_read,
        fifoCalcMatrixC_i_0_dout => fifoCalcMatrixCArray_V_0_dout,
        fifoCalcMatrixC_i_0_empty_n => fifoCalcMatrixCArray_V_0_empty_n,
        fifoCalcMatrixC_i_0_read => sort_C_U0_fifoCalcMatrixC_i_0_read,
        fifoCalcMatrixC_i_02_dout => fifoCalcMatrixCArray_V_1_dout,
        fifoCalcMatrixC_i_02_empty_n => fifoCalcMatrixCArray_V_1_empty_n,
        fifoCalcMatrixC_i_02_read => sort_C_U0_fifoCalcMatrixC_i_02_read,
        fifoSortMatrixC_o_0_din => sort_C_U0_fifoSortMatrixC_o_0_din,
        fifoSortMatrixC_o_0_full_n => fifoSortMatrixCArray_V_0_full_n,
        fifoSortMatrixC_o_0_write => sort_C_U0_fifoSortMatrixC_o_0_write,
        fifoSortMatrixC_o_03_din => sort_C_U0_fifoSortMatrixC_o_03_din,
        fifoSortMatrixC_o_03_full_n => fifoSortMatrixCArray_V_1_full_n,
        fifoSortMatrixC_o_03_write => sort_C_U0_fifoSortMatrixC_o_03_write);

    write_C_U0 : component krnl_sparse_matrix_acc_write_C
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => write_C_U0_ap_start,
        ap_done => write_C_U0_ap_done,
        ap_continue => write_C_U0_ap_continue,
        ap_idle => write_C_U0_ap_idle,
        ap_ready => write_C_U0_ap_ready,
        p_read => M_c_channel_dout,
        N_dout => N_c_dout,
        N_empty_n => N_c_empty_n,
        N_read => write_C_U0_N_read,
        fifoSortMatrixC_i_0_dout => fifoSortMatrixCArray_V_0_dout,
        fifoSortMatrixC_i_0_empty_n => fifoSortMatrixCArray_V_0_empty_n,
        fifoSortMatrixC_i_0_read => write_C_U0_fifoSortMatrixC_i_0_read,
        fifoSortMatrixC_i_01_dout => fifoSortMatrixCArray_V_1_dout,
        fifoSortMatrixC_i_01_empty_n => fifoSortMatrixCArray_V_1_empty_n,
        fifoSortMatrixC_i_01_read => write_C_U0_fifoSortMatrixC_i_01_read,
        m_axi_gmem4_AWVALID => write_C_U0_m_axi_gmem4_AWVALID,
        m_axi_gmem4_AWREADY => gmem4_AWREADY,
        m_axi_gmem4_AWADDR => write_C_U0_m_axi_gmem4_AWADDR,
        m_axi_gmem4_AWID => write_C_U0_m_axi_gmem4_AWID,
        m_axi_gmem4_AWLEN => write_C_U0_m_axi_gmem4_AWLEN,
        m_axi_gmem4_AWSIZE => write_C_U0_m_axi_gmem4_AWSIZE,
        m_axi_gmem4_AWBURST => write_C_U0_m_axi_gmem4_AWBURST,
        m_axi_gmem4_AWLOCK => write_C_U0_m_axi_gmem4_AWLOCK,
        m_axi_gmem4_AWCACHE => write_C_U0_m_axi_gmem4_AWCACHE,
        m_axi_gmem4_AWPROT => write_C_U0_m_axi_gmem4_AWPROT,
        m_axi_gmem4_AWQOS => write_C_U0_m_axi_gmem4_AWQOS,
        m_axi_gmem4_AWREGION => write_C_U0_m_axi_gmem4_AWREGION,
        m_axi_gmem4_AWUSER => write_C_U0_m_axi_gmem4_AWUSER,
        m_axi_gmem4_WVALID => write_C_U0_m_axi_gmem4_WVALID,
        m_axi_gmem4_WREADY => gmem4_WREADY,
        m_axi_gmem4_WDATA => write_C_U0_m_axi_gmem4_WDATA,
        m_axi_gmem4_WSTRB => write_C_U0_m_axi_gmem4_WSTRB,
        m_axi_gmem4_WLAST => write_C_U0_m_axi_gmem4_WLAST,
        m_axi_gmem4_WID => write_C_U0_m_axi_gmem4_WID,
        m_axi_gmem4_WUSER => write_C_U0_m_axi_gmem4_WUSER,
        m_axi_gmem4_ARVALID => write_C_U0_m_axi_gmem4_ARVALID,
        m_axi_gmem4_ARREADY => ap_const_logic_0,
        m_axi_gmem4_ARADDR => write_C_U0_m_axi_gmem4_ARADDR,
        m_axi_gmem4_ARID => write_C_U0_m_axi_gmem4_ARID,
        m_axi_gmem4_ARLEN => write_C_U0_m_axi_gmem4_ARLEN,
        m_axi_gmem4_ARSIZE => write_C_U0_m_axi_gmem4_ARSIZE,
        m_axi_gmem4_ARBURST => write_C_U0_m_axi_gmem4_ARBURST,
        m_axi_gmem4_ARLOCK => write_C_U0_m_axi_gmem4_ARLOCK,
        m_axi_gmem4_ARCACHE => write_C_U0_m_axi_gmem4_ARCACHE,
        m_axi_gmem4_ARPROT => write_C_U0_m_axi_gmem4_ARPROT,
        m_axi_gmem4_ARQOS => write_C_U0_m_axi_gmem4_ARQOS,
        m_axi_gmem4_ARREGION => write_C_U0_m_axi_gmem4_ARREGION,
        m_axi_gmem4_ARUSER => write_C_U0_m_axi_gmem4_ARUSER,
        m_axi_gmem4_RVALID => ap_const_logic_0,
        m_axi_gmem4_RREADY => write_C_U0_m_axi_gmem4_RREADY,
        m_axi_gmem4_RDATA => ap_const_lv32_0,
        m_axi_gmem4_RLAST => ap_const_logic_0,
        m_axi_gmem4_RID => ap_const_lv1_0,
        m_axi_gmem4_RUSER => ap_const_lv1_0,
        m_axi_gmem4_RRESP => ap_const_lv2_0,
        m_axi_gmem4_BVALID => gmem4_BVALID,
        m_axi_gmem4_BREADY => write_C_U0_m_axi_gmem4_BREADY,
        m_axi_gmem4_BRESP => gmem4_BRESP,
        m_axi_gmem4_BID => gmem4_BID,
        m_axi_gmem4_BUSER => gmem4_BUSER,
        p_read1 => matrixC_o_c_channel_dout);

    matrixC_o_c_channel_U : component krnl_sparse_matrix_acc_fifo_w64_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_ap_return_0,
        if_full_n => matrixC_o_c_channel_full_n,
        if_write => ap_channel_done_matrixC_o_c_channel,
        if_dout => matrixC_o_c_channel_dout,
        if_empty_n => matrixC_o_c_channel_empty_n,
        if_read => write_C_U0_ap_ready);

    M_c_channel_U : component krnl_sparse_matrix_acc_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => entry_proc_U0_ap_return_1,
        if_full_n => M_c_channel_full_n,
        if_write => ap_channel_done_M_c_channel,
        if_dout => M_c_channel_dout,
        if_empty_n => M_c_channel_empty_n,
        if_read => write_C_U0_ap_ready);

    fifoEdgeListPtr_U : component krnl_sparse_matrix_acc_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_edge_list_ptr_U0_fifoEdgeListPtr11_din,
        if_full_n => fifoEdgeListPtr_full_n,
        if_write => read_edge_list_ptr_U0_fifoEdgeListPtr11_write,
        if_dout => fifoEdgeListPtr_dout,
        if_empty_n => fifoEdgeListPtr_empty_n,
        if_read => calc_C_U0_fifoEdgeListPtr11_read);

    lenEdgeListPtr_c27_U : component krnl_sparse_matrix_acc_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_edge_list_ptr_U0_lenEdgeListPtr_c27_din,
        if_full_n => lenEdgeListPtr_c27_full_n,
        if_write => read_edge_list_ptr_U0_lenEdgeListPtr_c27_write,
        if_dout => lenEdgeListPtr_c27_dout,
        if_empty_n => lenEdgeListPtr_c27_empty_n,
        if_read => calc_C_U0_lenEdgeListPtr_read);

    fifoMatrixAIdx_U : component krnl_sparse_matrix_acc_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_A_U0_fifoMatrixAIdx12_din,
        if_full_n => fifoMatrixAIdx_full_n,
        if_write => read_A_U0_fifoMatrixAIdx12_write,
        if_dout => fifoMatrixAIdx_dout,
        if_empty_n => fifoMatrixAIdx_empty_n,
        if_read => calc_C_U0_fifoMatrixAIdx12_read);

    fifoMatrixA_U : component krnl_sparse_matrix_acc_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_A_U0_fifoMatrixA13_din,
        if_full_n => fifoMatrixA_full_n,
        if_write => read_A_U0_fifoMatrixA13_write,
        if_dout => fifoMatrixA_dout,
        if_empty_n => fifoMatrixA_empty_n,
        if_read => calc_C_U0_fifoMatrixA13_read);

    fifoMatrixB_U : component krnl_sparse_matrix_acc_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_B_U0_fifoMatrixB14_din,
        if_full_n => fifoMatrixB_full_n,
        if_write => read_B_U0_fifoMatrixB14_write,
        if_dout => fifoMatrixB_dout,
        if_empty_n => fifoMatrixB_empty_n,
        if_read => calc_C_U0_fifoMatrixB14_read);

    N_c_U : component krnl_sparse_matrix_acc_fifo_w32_d4_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => read_B_U0_N_c_din,
        if_full_n => N_c_full_n,
        if_write => read_B_U0_N_c_write,
        if_dout => N_c_dout,
        if_empty_n => N_c_empty_n,
        if_read => write_C_U0_N_read);

    fifoEdgeListPtr_calC_U : component krnl_sparse_matrix_acc_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_C_U0_fifoEdgeListPtr_calC15_din,
        if_full_n => fifoEdgeListPtr_calC_full_n,
        if_write => calc_C_U0_fifoEdgeListPtr_calC15_write,
        if_dout => fifoEdgeListPtr_calC_dout,
        if_empty_n => fifoEdgeListPtr_calC_empty_n,
        if_read => sort_C_U0_fifoEdgeListPtr_calC15_read);

    fifoMatrixCIdxArray_V_V_0_U : component krnl_sparse_matrix_acc_fifo_w16_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_C_U0_fifoMatrixCIdx_o_0_0_0_0_din,
        if_full_n => fifoMatrixCIdxArray_V_V_0_full_n,
        if_write => calc_C_U0_fifoMatrixCIdx_o_0_0_0_0_write,
        if_dout => fifoMatrixCIdxArray_V_V_0_dout,
        if_empty_n => fifoMatrixCIdxArray_V_V_0_empty_n,
        if_read => sort_C_U0_fifoMatrixCIdx_i_0_0_0_0_read);

    fifoMatrixCIdxArray_V_V_1_U : component krnl_sparse_matrix_acc_fifo_w16_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_C_U0_fifoMatrixCIdx_o_0_0_0_01_din,
        if_full_n => fifoMatrixCIdxArray_V_V_1_full_n,
        if_write => calc_C_U0_fifoMatrixCIdx_o_0_0_0_01_write,
        if_dout => fifoMatrixCIdxArray_V_V_1_dout,
        if_empty_n => fifoMatrixCIdxArray_V_V_1_empty_n,
        if_read => sort_C_U0_fifoMatrixCIdx_i_0_0_0_01_read);

    fifoCalcMatrixCArray_V_0_U : component krnl_sparse_matrix_acc_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_C_U0_fifoCalcMatrixC_o_0_din,
        if_full_n => fifoCalcMatrixCArray_V_0_full_n,
        if_write => calc_C_U0_fifoCalcMatrixC_o_0_write,
        if_dout => fifoCalcMatrixCArray_V_0_dout,
        if_empty_n => fifoCalcMatrixCArray_V_0_empty_n,
        if_read => sort_C_U0_fifoCalcMatrixC_i_0_read);

    fifoCalcMatrixCArray_V_1_U : component krnl_sparse_matrix_acc_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_C_U0_fifoCalcMatrixC_o_02_din,
        if_full_n => fifoCalcMatrixCArray_V_1_full_n,
        if_write => calc_C_U0_fifoCalcMatrixC_o_02_write,
        if_dout => fifoCalcMatrixCArray_V_1_dout,
        if_empty_n => fifoCalcMatrixCArray_V_1_empty_n,
        if_read => sort_C_U0_fifoCalcMatrixC_i_02_read);

    lenEdgeListPtr_c_U : component krnl_sparse_matrix_acc_fifo_w32_d2_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => calc_C_U0_lenEdgeListPtr_c_din,
        if_full_n => lenEdgeListPtr_c_full_n,
        if_write => calc_C_U0_lenEdgeListPtr_c_write,
        if_dout => lenEdgeListPtr_c_dout,
        if_empty_n => lenEdgeListPtr_c_empty_n,
        if_read => sort_C_U0_lenEdgeListPtr_read);

    fifoSortMatrixCArray_V_0_U : component krnl_sparse_matrix_acc_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sort_C_U0_fifoSortMatrixC_o_0_din,
        if_full_n => fifoSortMatrixCArray_V_0_full_n,
        if_write => sort_C_U0_fifoSortMatrixC_o_0_write,
        if_dout => fifoSortMatrixCArray_V_0_dout,
        if_empty_n => fifoSortMatrixCArray_V_0_empty_n,
        if_read => write_C_U0_fifoSortMatrixC_i_0_read);

    fifoSortMatrixCArray_V_1_U : component krnl_sparse_matrix_acc_fifo_w32_d32_S
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => sort_C_U0_fifoSortMatrixC_o_03_din,
        if_full_n => fifoSortMatrixCArray_V_1_full_n,
        if_write => sort_C_U0_fifoSortMatrixC_o_03_write,
        if_dout => fifoSortMatrixCArray_V_1_dout,
        if_empty_n => fifoSortMatrixCArray_V_1_empty_n,
        if_read => write_C_U0_fifoSortMatrixC_i_01_read);

    start_for_calc_C_U0_U : component krnl_sparse_matrix_acc_start_for_calc_C_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_calc_C_U0_din,
        if_full_n => start_for_calc_C_U0_full_n,
        if_write => read_edge_list_ptr_U0_start_write,
        if_dout => start_for_calc_C_U0_dout,
        if_empty_n => start_for_calc_C_U0_empty_n,
        if_read => calc_C_U0_ap_ready);

    start_for_sort_C_U0_U : component krnl_sparse_matrix_acc_start_for_sort_C_U0
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => start_for_sort_C_U0_din,
        if_full_n => start_for_sort_C_U0_full_n,
        if_write => calc_C_U0_start_write,
        if_dout => start_for_sort_C_U0_dout,
        if_empty_n => start_for_sort_C_U0_empty_n,
        if_read => sort_C_U0_ap_ready);





    ap_sync_reg_channel_write_M_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_M_c_channel <= ap_const_logic_0;
            else
                if (((entry_proc_U0_ap_done and entry_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_M_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_M_c_channel <= ap_sync_channel_write_M_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_matrixC_o_c_channel_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_channel_write_matrixC_o_c_channel <= ap_const_logic_0;
            else
                if (((entry_proc_U0_ap_done and entry_proc_U0_ap_continue) = ap_const_logic_1)) then 
                    ap_sync_reg_channel_write_matrixC_o_c_channel <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_matrixC_o_c_channel <= ap_sync_channel_write_matrixC_o_c_channel;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_entry_proc_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_entry_proc_U0_ap_ready <= ap_sync_entry_proc_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_A_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_read_A_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_A_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_A_U0_ap_ready <= ap_sync_read_A_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_B_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_read_B_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_B_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_B_U0_ap_ready <= ap_sync_read_B_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_read_edge_list_ptr_U0_ap_ready_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_sync_reg_read_edge_list_ptr_U0_ap_ready <= ap_const_logic_0;
            else
                if (((ap_sync_ready and ap_start) = ap_const_logic_1)) then 
                    ap_sync_reg_read_edge_list_ptr_U0_ap_ready <= ap_const_logic_0;
                else 
                    ap_sync_reg_read_edge_list_ptr_U0_ap_ready <= ap_sync_read_edge_list_ptr_U0_ap_ready;
                end if; 
            end if;
        end if;
    end process;

    ap_channel_done_M_c_channel <= ((ap_sync_reg_channel_write_M_c_channel xor ap_const_logic_1) and entry_proc_U0_ap_done);
    ap_channel_done_matrixC_o_c_channel <= ((ap_sync_reg_channel_write_matrixC_o_c_channel xor ap_const_logic_1) and entry_proc_U0_ap_done);
    ap_done <= write_C_U0_ap_done;
    ap_idle <= (write_C_U0_ap_idle and sort_C_U0_ap_idle and read_edge_list_ptr_U0_ap_idle and read_B_U0_ap_idle and read_A_U0_ap_idle and (ap_const_logic_1 xor M_c_channel_empty_n) and (matrixC_o_c_channel_empty_n xor ap_const_logic_1) and entry_proc_U0_ap_idle and calc_C_U0_ap_idle);
    ap_ready <= ap_sync_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    ap_sync_channel_write_M_c_channel <= ((ap_channel_done_M_c_channel and M_c_channel_full_n) or ap_sync_reg_channel_write_M_c_channel);
    ap_sync_channel_write_matrixC_o_c_channel <= ((matrixC_o_c_channel_full_n and ap_channel_done_matrixC_o_c_channel) or ap_sync_reg_channel_write_matrixC_o_c_channel);
    ap_sync_entry_proc_U0_ap_ready <= (entry_proc_U0_ap_ready or ap_sync_reg_entry_proc_U0_ap_ready);
    ap_sync_read_A_U0_ap_ready <= (read_A_U0_ap_ready or ap_sync_reg_read_A_U0_ap_ready);
    ap_sync_read_B_U0_ap_ready <= (read_B_U0_ap_ready or ap_sync_reg_read_B_U0_ap_ready);
    ap_sync_read_edge_list_ptr_U0_ap_ready <= (read_edge_list_ptr_U0_ap_ready or ap_sync_reg_read_edge_list_ptr_U0_ap_ready);
    ap_sync_ready <= (ap_sync_read_edge_list_ptr_U0_ap_ready and ap_sync_read_B_U0_ap_ready and ap_sync_read_A_U0_ap_ready and ap_sync_entry_proc_U0_ap_ready);
    calc_C_U0_ap_continue <= ap_const_logic_1;
    calc_C_U0_ap_start <= start_for_calc_C_U0_empty_n;
    entry_proc_U0_ap_continue <= (ap_sync_channel_write_matrixC_o_c_channel and ap_sync_channel_write_M_c_channel);
    entry_proc_U0_ap_start <= ((ap_sync_reg_entry_proc_U0_ap_ready xor ap_const_logic_1) and ap_start);
    read_A_U0_ap_continue <= ap_const_logic_1;
    read_A_U0_ap_start <= ((ap_sync_reg_read_A_U0_ap_ready xor ap_const_logic_1) and ap_start);
    read_B_U0_ap_continue <= ap_const_logic_1;
    read_B_U0_ap_start <= ((ap_sync_reg_read_B_U0_ap_ready xor ap_const_logic_1) and ap_start);
    read_edge_list_ptr_U0_ap_continue <= ap_const_logic_1;
    read_edge_list_ptr_U0_ap_start <= ((ap_sync_reg_read_edge_list_ptr_U0_ap_ready xor ap_const_logic_1) and ap_start);
    sort_C_U0_ap_continue <= ap_const_logic_1;
    sort_C_U0_ap_start <= start_for_sort_C_U0_empty_n;
    start_for_calc_C_U0_din <= (0=>ap_const_logic_1, others=>'-');
    start_for_sort_C_U0_din <= (0=>ap_const_logic_1, others=>'-');
    write_C_U0_ap_continue <= ap_const_logic_1;
    write_C_U0_ap_start <= (matrixC_o_c_channel_empty_n and M_c_channel_empty_n);
end behav;
